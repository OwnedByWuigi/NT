//*****************************************************************************
//***                        THIS FILE IS GENERATED                        ****
//***                       DO NOT MODIFY THIS FILE !!!                    ****
//*****************************************************************************
//*****************************************************************************
//* File: D3D10Wrapped.h
//* 
//* Description: 
//*     Interface specific D3D wrapper class declarations.
//*
//*****************************************************************************

// Ignore Prefast warnings 26060 (Range Precondition violation) and 28930 (Unused assignment of pointer variable)
#pragma warning( disable: 26060 )
#pragma warning( disable: 28930 )

#pragma once
#include "d3d10_1.h"
#include "D3DWrappedTypes.h"
#include "D3DWrapped.h"


////////////////////////////////////////////////////////////
//
// Wrapper classes
//
////////////////////////////////////////////////////////////




////////////////////////////////////////////////////////////
//
// C10DeviceChild
//
////////////////////////////////////////////////////////////

class C10DeviceChild : public CDeviceChild
{
public:
};


////////////////////////////////////////////////////////////
//
// C10DepthStencilState
//
////////////////////////////////////////////////////////////

class C10DepthStencilState : public CDepthStencilState, public C10DeviceChild
{
    ID3D10DepthStencilState *m_pDepthStencilState;

public:
    C10DepthStencilState( ID3D10DepthStencilState *pDepthStencilState );
    virtual ~C10DepthStencilState();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubDepthStencilState( int index, CDepthStencilState *pDepthStencilState ) {}
    virtual CDepthStencilState *Src() { return NULL; }
    virtual CDepthStencilState *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pDepthStencilState; }

    //
    // CDepthStencilState Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DepthStencilState **pInterface ) { *pInterface = (ID3D10DepthStencilState *) m_pDepthStencilState; }
    virtual CDepthStencilState *GetSubDepthStencilState( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_DEPTH_STENCIL_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pDepthStencilState; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10BlendState
//
////////////////////////////////////////////////////////////

class C10BlendState : public CBlendState, public C10DeviceChild
{
    ID3D10BlendState *m_pBlendState;

public:
    C10BlendState( ID3D10BlendState *pBlendState );
    virtual ~C10BlendState();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubBlendState( int index, CBlendState *pBlendState ) {}
    virtual CBlendState *Src() { return NULL; }
    virtual CBlendState *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pBlendState; }

    //
    // CBlendState Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10BlendState **pInterface ) { *pInterface = (ID3D10BlendState *) m_pBlendState; }
    virtual CBlendState *GetSubBlendState( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_BLEND_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pBlendState; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10RasterizerState
//
////////////////////////////////////////////////////////////

class C10RasterizerState : public CRasterizerState, public C10DeviceChild
{
    ID3D10RasterizerState *m_pRasterizerState;

public:
    C10RasterizerState( ID3D10RasterizerState *pRasterizerState );
    virtual ~C10RasterizerState();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubRasterizerState( int index, CRasterizerState *pRasterizerState ) {}
    virtual CRasterizerState *Src() { return NULL; }
    virtual CRasterizerState *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pRasterizerState; }

    //
    // CRasterizerState Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10RasterizerState **pInterface ) { *pInterface = (ID3D10RasterizerState *) m_pRasterizerState; }
    virtual CRasterizerState *GetSubRasterizerState( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_RASTERIZER_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pRasterizerState; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10Resource
//
////////////////////////////////////////////////////////////

class C10Resource : public CResource, public C10DeviceChild
{
public:
};


////////////////////////////////////////////////////////////
//
// C10Buffer
//
////////////////////////////////////////////////////////////

class C10Buffer : public CBuffer, public C10Resource
{
    ID3D10Buffer *m_pBuffer;

public:
    C10Buffer( ID3D10Buffer *pBuffer );
    virtual ~C10Buffer();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubBuffer( int index, CBuffer *pBuffer ) {}
    virtual CBuffer *Src() { return NULL; }
    virtual CBuffer *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pBuffer; }

    //
    // CBuffer Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Buffer **pInterface ) { *pInterface = (ID3D10Buffer *) m_pBuffer; }
    virtual CBuffer *GetSubBuffer( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // Map
    ////////////////////////////////////////////////////////////
    NRESULT Map(  D3D_MAP MapType, UINT MapFlags, void ** ppData );

    ////////////////////////////////////////////////////////////
    // Unmap
    ////////////////////////////////////////////////////////////
    void Unmap(  );

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_BUFFER_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CResource Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Resource **pInterface ) { *pInterface = (ID3D10Resource *) m_pBuffer; }
    virtual CResource *GetSubResource( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetType
    ////////////////////////////////////////////////////////////
    void GetType(  D3D_RESOURCE_DIMENSION * rType );

    ////////////////////////////////////////////////////////////
    // SetEvictionPriority
    ////////////////////////////////////////////////////////////
    void SetEvictionPriority(  UINT EvictionPriority );

    ////////////////////////////////////////////////////////////
    // GetEvictionPriority
    ////////////////////////////////////////////////////////////
    UINT GetEvictionPriority(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pBuffer; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10Texture1D
//
////////////////////////////////////////////////////////////

class C10Texture1D : public CTexture1D, public C10Resource
{
    ID3D10Texture1D *m_pTexture1D;

public:
    C10Texture1D( ID3D10Texture1D *pTexture1D );
    virtual ~C10Texture1D();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubTexture1D( int index, CTexture1D *pTexture1D ) {}
    virtual CTexture1D *Src() { return NULL; }
    virtual CTexture1D *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pTexture1D; }

    //
    // CTexture1D Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Texture1D **pInterface ) { *pInterface = (ID3D10Texture1D *) m_pTexture1D; }
    virtual CTexture1D *GetSubTexture1D( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // Map
    ////////////////////////////////////////////////////////////
    NRESULT Map(  UINT Subresource, D3D_MAP MapType, UINT MapFlags, void ** ppData );

    ////////////////////////////////////////////////////////////
    // Unmap
    ////////////////////////////////////////////////////////////
    void Unmap(  UINT Subresource );

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_TEXTURE1D_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CResource Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Resource **pInterface ) { *pInterface = (ID3D10Resource *) m_pTexture1D; }
    virtual CResource *GetSubResource( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetType
    ////////////////////////////////////////////////////////////
    void GetType(  D3D_RESOURCE_DIMENSION * rType );

    ////////////////////////////////////////////////////////////
    // SetEvictionPriority
    ////////////////////////////////////////////////////////////
    void SetEvictionPriority(  UINT EvictionPriority );

    ////////////////////////////////////////////////////////////
    // GetEvictionPriority
    ////////////////////////////////////////////////////////////
    UINT GetEvictionPriority(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pTexture1D; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10Texture2D
//
////////////////////////////////////////////////////////////

class C10Texture2D : public CTexture2D, public C10Resource
{
    ID3D10Texture2D *m_pTexture2D;

public:
    C10Texture2D( ID3D10Texture2D *pTexture2D );
    virtual ~C10Texture2D();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubTexture2D( int index, CTexture2D *pTexture2D ) {}
    virtual CTexture2D *Src() { return NULL; }
    virtual CTexture2D *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pTexture2D; }

    //
    // CTexture2D Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Texture2D **pInterface ) { *pInterface = (ID3D10Texture2D *) m_pTexture2D; }
    virtual CTexture2D *GetSubTexture2D( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // Map
    ////////////////////////////////////////////////////////////
    NRESULT Map(  UINT Subresource, D3D_MAP MapType, UINT MapFlags, D3D_MAPPED_TEXTURE2D * pMappedTex2D );

    ////////////////////////////////////////////////////////////
    // Unmap
    ////////////////////////////////////////////////////////////
    void Unmap(  UINT Subresource );

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_TEXTURE2D_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CResource Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Resource **pInterface ) { *pInterface = (ID3D10Resource *) m_pTexture2D; }
    virtual CResource *GetSubResource( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetType
    ////////////////////////////////////////////////////////////
    void GetType(  D3D_RESOURCE_DIMENSION * rType );

    ////////////////////////////////////////////////////////////
    // SetEvictionPriority
    ////////////////////////////////////////////////////////////
    void SetEvictionPriority(  UINT EvictionPriority );

    ////////////////////////////////////////////////////////////
    // GetEvictionPriority
    ////////////////////////////////////////////////////////////
    UINT GetEvictionPriority(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pTexture2D; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10Texture3D
//
////////////////////////////////////////////////////////////

class C10Texture3D : public CTexture3D, public C10Resource
{
    ID3D10Texture3D *m_pTexture3D;

public:
    C10Texture3D( ID3D10Texture3D *pTexture3D );
    virtual ~C10Texture3D();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubTexture3D( int index, CTexture3D *pTexture3D ) {}
    virtual CTexture3D *Src() { return NULL; }
    virtual CTexture3D *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pTexture3D; }

    //
    // CTexture3D Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Texture3D **pInterface ) { *pInterface = (ID3D10Texture3D *) m_pTexture3D; }
    virtual CTexture3D *GetSubTexture3D( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // Map
    ////////////////////////////////////////////////////////////
    NRESULT Map(  UINT Subresource, D3D_MAP MapType, UINT MapFlags, D3D_MAPPED_TEXTURE3D * pMappedTex3D );

    ////////////////////////////////////////////////////////////
    // Unmap
    ////////////////////////////////////////////////////////////
    void Unmap(  UINT Subresource );

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_TEXTURE3D_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CResource Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Resource **pInterface ) { *pInterface = (ID3D10Resource *) m_pTexture3D; }
    virtual CResource *GetSubResource( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetType
    ////////////////////////////////////////////////////////////
    void GetType(  D3D_RESOURCE_DIMENSION * rType );

    ////////////////////////////////////////////////////////////
    // SetEvictionPriority
    ////////////////////////////////////////////////////////////
    void SetEvictionPriority(  UINT EvictionPriority );

    ////////////////////////////////////////////////////////////
    // GetEvictionPriority
    ////////////////////////////////////////////////////////////
    UINT GetEvictionPriority(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pTexture3D; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10View
//
////////////////////////////////////////////////////////////

class C10View : public CView, public C10DeviceChild
{
public:
};


////////////////////////////////////////////////////////////
//
// C10ShaderResourceView
//
////////////////////////////////////////////////////////////

class C10ShaderResourceView : public CShaderResourceView, public C10View
{
    ID3D10ShaderResourceView *m_pShaderResourceView;

public:
    C10ShaderResourceView( ID3D10ShaderResourceView *pShaderResourceView );
    virtual ~C10ShaderResourceView();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubShaderResourceView( int index, CShaderResourceView *pShaderResourceView ) {}
    virtual CShaderResourceView *Src() { return NULL; }
    virtual CShaderResourceView *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pShaderResourceView; }

    //
    // CShaderResourceView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10ShaderResourceView **pInterface ) { *pInterface = (ID3D10ShaderResourceView *) m_pShaderResourceView; }
    virtual CShaderResourceView *GetSubShaderResourceView( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_SHADER_RESOURCE_VIEW_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10View **pInterface ) { *pInterface = (ID3D10View *) m_pShaderResourceView; }
    virtual CView *GetSubView( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetResource
    ////////////////////////////////////////////////////////////
    void GetResource(  CResource ** ppResource );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pShaderResourceView; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10RenderTargetView
//
////////////////////////////////////////////////////////////

class C10RenderTargetView : public CRenderTargetView, public C10View
{
    ID3D10RenderTargetView *m_pRenderTargetView;

public:
    C10RenderTargetView( ID3D10RenderTargetView *pRenderTargetView );
    virtual ~C10RenderTargetView();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubRenderTargetView( int index, CRenderTargetView *pRenderTargetView ) {}
    virtual CRenderTargetView *Src() { return NULL; }
    virtual CRenderTargetView *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pRenderTargetView; }

    //
    // CRenderTargetView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10RenderTargetView **pInterface ) { *pInterface = (ID3D10RenderTargetView *) m_pRenderTargetView; }
    virtual CRenderTargetView *GetSubRenderTargetView( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_RENDER_TARGET_VIEW_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10View **pInterface ) { *pInterface = (ID3D10View *) m_pRenderTargetView; }
    virtual CView *GetSubView( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetResource
    ////////////////////////////////////////////////////////////
    void GetResource(  CResource ** ppResource );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pRenderTargetView; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10DepthStencilView
//
////////////////////////////////////////////////////////////

class C10DepthStencilView : public CDepthStencilView, public C10View
{
    ID3D10DepthStencilView *m_pDepthStencilView;

public:
    C10DepthStencilView( ID3D10DepthStencilView *pDepthStencilView );
    virtual ~C10DepthStencilView();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubDepthStencilView( int index, CDepthStencilView *pDepthStencilView ) {}
    virtual CDepthStencilView *Src() { return NULL; }
    virtual CDepthStencilView *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pDepthStencilView; }

    //
    // CDepthStencilView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DepthStencilView **pInterface ) { *pInterface = (ID3D10DepthStencilView *) m_pDepthStencilView; }
    virtual CDepthStencilView *GetSubDepthStencilView( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_DEPTH_STENCIL_VIEW_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10View **pInterface ) { *pInterface = (ID3D10View *) m_pDepthStencilView; }
    virtual CView *GetSubView( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetResource
    ////////////////////////////////////////////////////////////
    void GetResource(  CResource ** ppResource );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pDepthStencilView; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10VertexShader
//
////////////////////////////////////////////////////////////

class C10VertexShader : public CVertexShader, public C10DeviceChild
{
    ID3D10VertexShader *m_pVertexShader;

public:
    C10VertexShader( ID3D10VertexShader *pVertexShader );
    virtual ~C10VertexShader();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubVertexShader( int index, CVertexShader *pVertexShader ) {}
    virtual CVertexShader *Src() { return NULL; }
    virtual CVertexShader *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pVertexShader; }

    //
    // CVertexShader Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10VertexShader **pInterface ) { *pInterface = (ID3D10VertexShader *) m_pVertexShader; }
    virtual CVertexShader *GetSubVertexShader( int index ) { return NULL; }


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pVertexShader; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10GeometryShader
//
////////////////////////////////////////////////////////////

class C10GeometryShader : public CGeometryShader, public C10DeviceChild
{
    ID3D10GeometryShader *m_pGeometryShader;

public:
    C10GeometryShader( ID3D10GeometryShader *pGeometryShader );
    virtual ~C10GeometryShader();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubGeometryShader( int index, CGeometryShader *pGeometryShader ) {}
    virtual CGeometryShader *Src() { return NULL; }
    virtual CGeometryShader *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pGeometryShader; }

    //
    // CGeometryShader Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10GeometryShader **pInterface ) { *pInterface = (ID3D10GeometryShader *) m_pGeometryShader; }
    virtual CGeometryShader *GetSubGeometryShader( int index ) { return NULL; }


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pGeometryShader; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10PixelShader
//
////////////////////////////////////////////////////////////

class C10PixelShader : public CPixelShader, public C10DeviceChild
{
    ID3D10PixelShader *m_pPixelShader;

public:
    C10PixelShader( ID3D10PixelShader *pPixelShader );
    virtual ~C10PixelShader();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubPixelShader( int index, CPixelShader *pPixelShader ) {}
    virtual CPixelShader *Src() { return NULL; }
    virtual CPixelShader *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pPixelShader; }

    //
    // CPixelShader Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10PixelShader **pInterface ) { *pInterface = (ID3D10PixelShader *) m_pPixelShader; }
    virtual CPixelShader *GetSubPixelShader( int index ) { return NULL; }


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pPixelShader; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10InputLayout
//
////////////////////////////////////////////////////////////

class C10InputLayout : public CInputLayout, public C10DeviceChild
{
    ID3D10InputLayout *m_pInputLayout;

public:
    C10InputLayout( ID3D10InputLayout *pInputLayout );
    virtual ~C10InputLayout();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubInputLayout( int index, CInputLayout *pInputLayout ) {}
    virtual CInputLayout *Src() { return NULL; }
    virtual CInputLayout *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pInputLayout; }

    //
    // CInputLayout Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10InputLayout **pInterface ) { *pInterface = (ID3D10InputLayout *) m_pInputLayout; }
    virtual CInputLayout *GetSubInputLayout( int index ) { return NULL; }


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pInputLayout; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10SamplerState
//
////////////////////////////////////////////////////////////

class C10SamplerState : public CSamplerState, public C10DeviceChild
{
    ID3D10SamplerState *m_pSamplerState;

public:
    C10SamplerState( ID3D10SamplerState *pSamplerState );
    virtual ~C10SamplerState();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubSamplerState( int index, CSamplerState *pSamplerState ) {}
    virtual CSamplerState *Src() { return NULL; }
    virtual CSamplerState *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pSamplerState; }

    //
    // CSamplerState Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10SamplerState **pInterface ) { *pInterface = (ID3D10SamplerState *) m_pSamplerState; }
    virtual CSamplerState *GetSubSamplerState( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_SAMPLER_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pSamplerState; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10Asynchronous
//
////////////////////////////////////////////////////////////

class C10Asynchronous : public CAsynchronous, public C10DeviceChild
{
public:
};


////////////////////////////////////////////////////////////
//
// C10Query
//
////////////////////////////////////////////////////////////

class C10Query : public CQuery, public C10Asynchronous
{
public:
};


////////////////////////////////////////////////////////////
//
// C10Predicate
//
////////////////////////////////////////////////////////////

class C10Predicate : public CPredicate, public C10Query
{
    ID3D10Predicate *m_pPredicate;

public:
    C10Predicate( ID3D10Predicate *pPredicate );
    virtual ~C10Predicate();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubPredicate( int index, CPredicate *pPredicate ) {}
    virtual CPredicate *Src() { return NULL; }
    virtual CPredicate *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pPredicate; }

    //
    // CPredicate Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Predicate **pInterface ) { *pInterface = (ID3D10Predicate *) m_pPredicate; }
    virtual CPredicate *GetSubPredicate( int index ) { return NULL; }


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CQuery Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Query **pInterface ) { *pInterface = (ID3D10Query *) m_pPredicate; }
    virtual CQuery *GetSubQuery( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_QUERY_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CAsynchronous Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Asynchronous **pInterface ) { *pInterface = (ID3D10Asynchronous *) m_pPredicate; }
    virtual CAsynchronous *GetSubAsynchronous( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // Begin
    ////////////////////////////////////////////////////////////
    void Begin(  );

    ////////////////////////////////////////////////////////////
    // End
    ////////////////////////////////////////////////////////////
    void End(  );

    ////////////////////////////////////////////////////////////
    // GetData
    ////////////////////////////////////////////////////////////
    NRESULT GetData(  void * pData, UINT DataSize, UINT GetDataFlags );

    ////////////////////////////////////////////////////////////
    // GetDataSize
    ////////////////////////////////////////////////////////////
    UINT GetDataSize(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pPredicate; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10Counter
//
////////////////////////////////////////////////////////////

class C10Counter : public CCounter, public C10Asynchronous
{
    ID3D10Counter *m_pCounter;

public:
    C10Counter( ID3D10Counter *pCounter );
    virtual ~C10Counter();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubCounter( int index, CCounter *pCounter ) {}
    virtual CCounter *Src() { return NULL; }
    virtual CCounter *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pCounter; }

    //
    // CCounter Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Counter **pInterface ) { *pInterface = (ID3D10Counter *) m_pCounter; }
    virtual CCounter *GetSubCounter( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_COUNTER_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CAsynchronous Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Asynchronous **pInterface ) { *pInterface = (ID3D10Asynchronous *) m_pCounter; }
    virtual CAsynchronous *GetSubAsynchronous( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // Begin
    ////////////////////////////////////////////////////////////
    void Begin(  );

    ////////////////////////////////////////////////////////////
    // End
    ////////////////////////////////////////////////////////////
    void End(  );

    ////////////////////////////////////////////////////////////
    // GetData
    ////////////////////////////////////////////////////////////
    NRESULT GetData(  void * pData, UINT DataSize, UINT GetDataFlags );

    ////////////////////////////////////////////////////////////
    // GetDataSize
    ////////////////////////////////////////////////////////////
    UINT GetDataSize(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pCounter; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10Device
//
////////////////////////////////////////////////////////////

class C10Device : public CDevice
{
    ID3D10Device *m_pDevice;

public:
    C10Device( ID3D10Device *pDevice );
    virtual ~C10Device();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubDevice( int index, CDevice *pDevice ) {}
    virtual CDevice *Src() { return NULL; }
    virtual CDevice *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pDevice; }

    //
    // CDevice Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Device **pInterface ) { *pInterface = (ID3D10Device *) m_pDevice; }
    virtual CDevice *GetSubDevice( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // VSSetConstantBuffers
    ////////////////////////////////////////////////////////////
    void VSSetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer *const * ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // PSSetShaderResources
    ////////////////////////////////////////////////////////////
    void PSSetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView *const * ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // PSSetShader
    ////////////////////////////////////////////////////////////
    void PSSetShader(  CPixelShader * pPixelShader );

    ////////////////////////////////////////////////////////////
    // PSSetSamplers
    ////////////////////////////////////////////////////////////
    void PSSetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState *const * ppSamplers );

    ////////////////////////////////////////////////////////////
    // VSSetShader
    ////////////////////////////////////////////////////////////
    void VSSetShader(  CVertexShader * pVertexShader );

    ////////////////////////////////////////////////////////////
    // DrawIndexed
    ////////////////////////////////////////////////////////////
    void DrawIndexed(  UINT IndexCount, UINT StartIndexLocation, INT BaseVertexLocation );

    ////////////////////////////////////////////////////////////
    // Draw
    ////////////////////////////////////////////////////////////
    void Draw(  UINT VertexCount, UINT StartVertexLocation );

    ////////////////////////////////////////////////////////////
    // PSSetConstantBuffers
    ////////////////////////////////////////////////////////////
    void PSSetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer *const * ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // IASetInputLayout
    ////////////////////////////////////////////////////////////
    void IASetInputLayout(  CInputLayout * pInputLayout );

    ////////////////////////////////////////////////////////////
    // IASetVertexBuffers
    ////////////////////////////////////////////////////////////
    void IASetVertexBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer *const * ppVertexBuffers, const UINT * pStrides, const UINT * pOffsets );

    ////////////////////////////////////////////////////////////
    // IASetIndexBuffer
    ////////////////////////////////////////////////////////////
    void IASetIndexBuffer(  CBuffer * pIndexBuffer, DXGI_FORMAT Format, UINT Offset );

    ////////////////////////////////////////////////////////////
    // DrawIndexedInstanced
    ////////////////////////////////////////////////////////////
    void DrawIndexedInstanced(  UINT IndexCountPerInstance, UINT InstanceCount, UINT StartIndexLocation, INT BaseVertexLocation, UINT StartInstanceLocation );

    ////////////////////////////////////////////////////////////
    // DrawInstanced
    ////////////////////////////////////////////////////////////
    void DrawInstanced(  UINT VertexCountPerInstance, UINT InstanceCount, UINT StartVertexLocation, UINT StartInstanceLocation );

    ////////////////////////////////////////////////////////////
    // GSSetConstantBuffers
    ////////////////////////////////////////////////////////////
    void GSSetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer *const * ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // GSSetShader
    ////////////////////////////////////////////////////////////
    void GSSetShader(  CGeometryShader * pShader );

    ////////////////////////////////////////////////////////////
    // IASetPrimitiveTopology
    ////////////////////////////////////////////////////////////
    void IASetPrimitiveTopology(  D3D_PRIMITIVE_TOPOLOGY Topology );

    ////////////////////////////////////////////////////////////
    // VSSetShaderResources
    ////////////////////////////////////////////////////////////
    void VSSetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView *const * ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // VSSetSamplers
    ////////////////////////////////////////////////////////////
    void VSSetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState *const * ppSamplers );

    ////////////////////////////////////////////////////////////
    // SetPredication
    ////////////////////////////////////////////////////////////
    void SetPredication(  CPredicate * pPredicate, BOOL PredicateValue );

    ////////////////////////////////////////////////////////////
    // GSSetShaderResources
    ////////////////////////////////////////////////////////////
    void GSSetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView *const * ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // GSSetSamplers
    ////////////////////////////////////////////////////////////
    void GSSetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState *const * ppSamplers );

    ////////////////////////////////////////////////////////////
    // OMSetRenderTargets
    ////////////////////////////////////////////////////////////
    void OMSetRenderTargets(  UINT NumViews, CRenderTargetView *const * ppRenderTargetViews, CDepthStencilView * pDepthStencilView );

    ////////////////////////////////////////////////////////////
    // OMSetBlendState
    ////////////////////////////////////////////////////////////
    void OMSetBlendState(  CBlendState * pBlendState, const FLOAT BlendFactor[4], UINT SampleMask );

    ////////////////////////////////////////////////////////////
    // OMSetDepthStencilState
    ////////////////////////////////////////////////////////////
    void OMSetDepthStencilState(  CDepthStencilState * pDepthStencilState, UINT StencilRef );

    ////////////////////////////////////////////////////////////
    // SOSetTargets
    ////////////////////////////////////////////////////////////
    void SOSetTargets(  UINT NumBuffers, CBuffer *const * ppSOTargets, const UINT * pOffsets );

    ////////////////////////////////////////////////////////////
    // DrawAuto
    ////////////////////////////////////////////////////////////
    void DrawAuto(  );

    ////////////////////////////////////////////////////////////
    // RSSetState
    ////////////////////////////////////////////////////////////
    void RSSetState(  CRasterizerState * pRasterizerState );

    ////////////////////////////////////////////////////////////
    // RSSetViewports
    ////////////////////////////////////////////////////////////
    void RSSetViewports(  UINT NumViewports, const D3D_VIEWPORT * pViewports );

    ////////////////////////////////////////////////////////////
    // RSSetScissorRects
    ////////////////////////////////////////////////////////////
    void RSSetScissorRects(  UINT NumRects, const D3D_RECT * pRects );

    ////////////////////////////////////////////////////////////
    // CopySubresourceRegion
    ////////////////////////////////////////////////////////////
    void CopySubresourceRegion(  CResource * pDstResource, UINT DstSubresource, UINT DstX, UINT DstY, UINT DstZ, CResource * pSrcResource, UINT SrcSubresource, const D3D_BOX * pSrcBox );

    ////////////////////////////////////////////////////////////
    // CopyResource
    ////////////////////////////////////////////////////////////
    void CopyResource(  CResource * pDstResource, CResource * pSrcResource );

    ////////////////////////////////////////////////////////////
    // UpdateSubresource
    ////////////////////////////////////////////////////////////
    void UpdateSubresource(  CResource * pDstResource, UINT DstSubresource, const D3D_BOX * pDstBox, const void * pSrcData, UINT SrcRowPitch, UINT SrcDepthPitch );

    ////////////////////////////////////////////////////////////
    // ClearRenderTargetView
    ////////////////////////////////////////////////////////////
    void ClearRenderTargetView(  CRenderTargetView * pRenderTargetView, const FLOAT ColorRGBA[4] );

    ////////////////////////////////////////////////////////////
    // ClearDepthStencilView
    ////////////////////////////////////////////////////////////
    void ClearDepthStencilView(  CDepthStencilView * pDepthStencilView, UINT ClearFlags, FLOAT Depth, UINT8 Stencil );

    ////////////////////////////////////////////////////////////
    // GenerateMips
    ////////////////////////////////////////////////////////////
    void GenerateMips(  CShaderResourceView * pShaderResourceView );

    ////////////////////////////////////////////////////////////
    // ResolveSubresource
    ////////////////////////////////////////////////////////////
    void ResolveSubresource(  CResource * pDstResource, UINT DstSubresource, CResource * pSrcResource, UINT SrcSubresource, DXGI_FORMAT Format );

    ////////////////////////////////////////////////////////////
    // VSGetConstantBuffers
    ////////////////////////////////////////////////////////////
    void VSGetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer ** ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // PSGetShaderResources
    ////////////////////////////////////////////////////////////
    void PSGetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView ** ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // PSGetShader
    ////////////////////////////////////////////////////////////
    void PSGetShader(  CPixelShader ** ppPixelShader );

    ////////////////////////////////////////////////////////////
    // PSGetSamplers
    ////////////////////////////////////////////////////////////
    void PSGetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState ** ppSamplers );

    ////////////////////////////////////////////////////////////
    // VSGetShader
    ////////////////////////////////////////////////////////////
    void VSGetShader(  CVertexShader ** ppVertexShader );

    ////////////////////////////////////////////////////////////
    // PSGetConstantBuffers
    ////////////////////////////////////////////////////////////
    void PSGetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer ** ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // IAGetInputLayout
    ////////////////////////////////////////////////////////////
    void IAGetInputLayout(  CInputLayout ** ppInputLayout );

    ////////////////////////////////////////////////////////////
    // IAGetVertexBuffers
    ////////////////////////////////////////////////////////////
    void IAGetVertexBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer ** ppVertexBuffers, UINT * pStrides, UINT * pOffsets );

    ////////////////////////////////////////////////////////////
    // IAGetIndexBuffer
    ////////////////////////////////////////////////////////////
    void IAGetIndexBuffer(  CBuffer ** pIndexBuffer, DXGI_FORMAT * Format, UINT * Offset );

    ////////////////////////////////////////////////////////////
    // GSGetConstantBuffers
    ////////////////////////////////////////////////////////////
    void GSGetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer ** ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // GSGetShader
    ////////////////////////////////////////////////////////////
    void GSGetShader(  CGeometryShader ** ppGeometryShader );

    ////////////////////////////////////////////////////////////
    // IAGetPrimitiveTopology
    ////////////////////////////////////////////////////////////
    void IAGetPrimitiveTopology(  D3D_PRIMITIVE_TOPOLOGY * pTopology );

    ////////////////////////////////////////////////////////////
    // VSGetShaderResources
    ////////////////////////////////////////////////////////////
    void VSGetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView ** ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // VSGetSamplers
    ////////////////////////////////////////////////////////////
    void VSGetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState ** ppSamplers );

    ////////////////////////////////////////////////////////////
    // GetPredication
    ////////////////////////////////////////////////////////////
    void GetPredication(  CPredicate ** ppPredicate, BOOL * pPredicateValue );

    ////////////////////////////////////////////////////////////
    // GSGetShaderResources
    ////////////////////////////////////////////////////////////
    void GSGetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView ** ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // GSGetSamplers
    ////////////////////////////////////////////////////////////
    void GSGetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState ** ppSamplers );

    ////////////////////////////////////////////////////////////
    // OMGetRenderTargets
    ////////////////////////////////////////////////////////////
    void OMGetRenderTargets(  UINT NumViews, CRenderTargetView ** ppRenderTargetViews, CDepthStencilView ** ppDepthStencilView );

    ////////////////////////////////////////////////////////////
    // OMGetBlendState
    ////////////////////////////////////////////////////////////
    void OMGetBlendState(  CBlendState ** ppBlendState, FLOAT BlendFactor[4], UINT * pSampleMask );

    ////////////////////////////////////////////////////////////
    // OMGetDepthStencilState
    ////////////////////////////////////////////////////////////
    void OMGetDepthStencilState(  CDepthStencilState ** ppDepthStencilState, UINT * pStencilRef );

    ////////////////////////////////////////////////////////////
    // SOGetTargets
    ////////////////////////////////////////////////////////////
    void SOGetTargets(  UINT NumBuffers, CBuffer ** ppSOTargets, UINT * pOffsets );

    ////////////////////////////////////////////////////////////
    // RSGetState
    ////////////////////////////////////////////////////////////
    void RSGetState(  CRasterizerState ** ppRasterizerState );

    ////////////////////////////////////////////////////////////
    // RSGetViewports
    ////////////////////////////////////////////////////////////
    void RSGetViewports(  UINT * NumViewports, D3D_VIEWPORT * pViewports );

    ////////////////////////////////////////////////////////////
    // RSGetScissorRects
    ////////////////////////////////////////////////////////////
    void RSGetScissorRects(  UINT * NumRects, D3D_RECT * pRects );

    ////////////////////////////////////////////////////////////
    // GetDeviceRemovedReason
    ////////////////////////////////////////////////////////////
    NRESULT GetDeviceRemovedReason(  );

    ////////////////////////////////////////////////////////////
    // SetExceptionMode
    ////////////////////////////////////////////////////////////
    NRESULT SetExceptionMode(  UINT RaiseFlags );

    ////////////////////////////////////////////////////////////
    // GetExceptionMode
    ////////////////////////////////////////////////////////////
    UINT GetExceptionMode(  );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );

    ////////////////////////////////////////////////////////////
    // ClearState
    ////////////////////////////////////////////////////////////
    void ClearState(  );

    ////////////////////////////////////////////////////////////
    // Flush
    ////////////////////////////////////////////////////////////
    void Flush(  );

    ////////////////////////////////////////////////////////////
    // CreateBuffer
    ////////////////////////////////////////////////////////////
    NRESULT CreateBuffer(  const D3D_BUFFER_DESC * pDesc, const D3D_SUBRESOURCE_DATA * pInitialData, CBuffer ** ppBuffer );

    ////////////////////////////////////////////////////////////
    // CreateTexture1D
    ////////////////////////////////////////////////////////////
    NRESULT CreateTexture1D(  const D3D_TEXTURE1D_DESC * pDesc, const D3D_SUBRESOURCE_DATA * pInitialData, CTexture1D ** ppTexture1D );

    ////////////////////////////////////////////////////////////
    // CreateTexture2D
    ////////////////////////////////////////////////////////////
    NRESULT CreateTexture2D(  const D3D_TEXTURE2D_DESC * pDesc, const D3D_SUBRESOURCE_DATA * pInitialData, CTexture2D ** ppTexture2D );

    ////////////////////////////////////////////////////////////
    // CreateTexture3D
    ////////////////////////////////////////////////////////////
    NRESULT CreateTexture3D(  const D3D_TEXTURE3D_DESC * pDesc, const D3D_SUBRESOURCE_DATA * pInitialData, CTexture3D ** ppTexture3D );

    ////////////////////////////////////////////////////////////
    // CreateShaderResourceView
    ////////////////////////////////////////////////////////////
    NRESULT CreateShaderResourceView(  CResource * pResource, const D3D_SHADER_RESOURCE_VIEW_DESC * pDesc, CShaderResourceView ** ppSRView );

    ////////////////////////////////////////////////////////////
    // CreateRenderTargetView
    ////////////////////////////////////////////////////////////
    NRESULT CreateRenderTargetView(  CResource * pResource, const D3D_RENDER_TARGET_VIEW_DESC * pDesc, CRenderTargetView ** ppRTView );

    ////////////////////////////////////////////////////////////
    // CreateDepthStencilView
    ////////////////////////////////////////////////////////////
    NRESULT CreateDepthStencilView(  CResource * pResource, const D3D_DEPTH_STENCIL_VIEW_DESC * pDesc, CDepthStencilView ** ppDepthStencilView );

    ////////////////////////////////////////////////////////////
    // CreateInputLayout
    ////////////////////////////////////////////////////////////
    NRESULT CreateInputLayout(  const D3D_INPUT_ELEMENT_DESC * pInputElementDescs, UINT NumElements, const void * pShaderBytecodeWithInputSignature, SIZE_T BytecodeLength, CInputLayout ** ppInputLayout );

    ////////////////////////////////////////////////////////////
    // CreateVertexShader
    ////////////////////////////////////////////////////////////
    NRESULT CreateVertexShader(  const void * pShaderBytecode, SIZE_T BytecodeLength, CVertexShader ** ppVertexShader );

    ////////////////////////////////////////////////////////////
    // CreateGeometryShader
    ////////////////////////////////////////////////////////////
    NRESULT CreateGeometryShader(  const void * pShaderBytecode, SIZE_T BytecodeLength, CGeometryShader ** ppGeometryShader );

    ////////////////////////////////////////////////////////////
    // CreateGeometryShaderWithStreamOutput
    ////////////////////////////////////////////////////////////
    NRESULT CreateGeometryShaderWithStreamOutput(  const void * pShaderBytecode, SIZE_T BytecodeLength, const D3D_SO_DECLARATION_ENTRY * pSODeclaration, UINT NumEntries, UINT OutputStreamStride, CGeometryShader ** ppGeometryShader );

    ////////////////////////////////////////////////////////////
    // CreatePixelShader
    ////////////////////////////////////////////////////////////
    NRESULT CreatePixelShader(  const void * pShaderBytecode, SIZE_T BytecodeLength, CPixelShader ** ppPixelShader );

    ////////////////////////////////////////////////////////////
    // CreateBlendState
    ////////////////////////////////////////////////////////////
    NRESULT CreateBlendState(  const D3D_BLEND_DESC * pBlendStateDesc, CBlendState ** ppBlendState );

    ////////////////////////////////////////////////////////////
    // CreateDepthStencilState
    ////////////////////////////////////////////////////////////
    NRESULT CreateDepthStencilState(  const D3D_DEPTH_STENCIL_DESC * pDepthStencilDesc, CDepthStencilState ** ppDepthStencilState );

    ////////////////////////////////////////////////////////////
    // CreateRasterizerState
    ////////////////////////////////////////////////////////////
    NRESULT CreateRasterizerState(  const D3D_RASTERIZER_DESC * pRasterizerDesc, CRasterizerState ** ppRasterizerState );

    ////////////////////////////////////////////////////////////
    // CreateSamplerState
    ////////////////////////////////////////////////////////////
    NRESULT CreateSamplerState(  const D3D_SAMPLER_DESC * pSamplerDesc, CSamplerState ** ppSamplerState );

    ////////////////////////////////////////////////////////////
    // CreateQuery
    ////////////////////////////////////////////////////////////
    NRESULT CreateQuery(  const D3D_QUERY_DESC * pQueryDesc, CQuery ** ppQuery );

    ////////////////////////////////////////////////////////////
    // CreatePredicate
    ////////////////////////////////////////////////////////////
    NRESULT CreatePredicate(  const D3D_QUERY_DESC * pPredicateDesc, CPredicate ** ppPredicate );

    ////////////////////////////////////////////////////////////
    // CreateCounter
    ////////////////////////////////////////////////////////////
    NRESULT CreateCounter(  const D3D_COUNTER_DESC * pCounterDesc, CCounter ** ppCounter );

    ////////////////////////////////////////////////////////////
    // CheckFormatSupport
    ////////////////////////////////////////////////////////////
    NRESULT CheckFormatSupport(  DXGI_FORMAT Format, UINT * pFormatSupport );

    ////////////////////////////////////////////////////////////
    // CheckMultisampleQualityLevels
    ////////////////////////////////////////////////////////////
    NRESULT CheckMultisampleQualityLevels(  DXGI_FORMAT Format, UINT SampleCount, UINT * pNumQualityLevels );

    ////////////////////////////////////////////////////////////
    // CheckCounterInfo
    ////////////////////////////////////////////////////////////
    void CheckCounterInfo(  D3D_COUNTER_INFO * pCounterInfo );

    ////////////////////////////////////////////////////////////
    // CheckCounter
    ////////////////////////////////////////////////////////////
    NRESULT CheckCounter(  const D3D_COUNTER_DESC * pDesc, D3D_COUNTER_TYPE * pType, UINT * pActiveCounters, LPSTR szName, UINT * pNameLength, LPSTR szUnits, UINT * pUnitsLength, LPSTR szDescription, UINT * pDescriptionLength );

    ////////////////////////////////////////////////////////////
    // GetCreationFlags
    ////////////////////////////////////////////////////////////
    UINT GetCreationFlags(  );

    ////////////////////////////////////////////////////////////
    // OpenSharedResource
    ////////////////////////////////////////////////////////////
    NRESULT OpenSharedResource(  HANDLE hResource, REFIID ReturnedInterface, void ** ppResource );

    ////////////////////////////////////////////////////////////
    // SetTextFilterSize
    ////////////////////////////////////////////////////////////
    void SetTextFilterSize(  UINT Width, UINT Height );

    ////////////////////////////////////////////////////////////
    // GetTextFilterSize
    ////////////////////////////////////////////////////////////
    void GetTextFilterSize(  UINT * pWidth, UINT * pHeight );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
    virtual HRESULT CreateTexture2DFromSwapChain( IDXGISwapChain **ppSwapChain, CTexture2D ** ppTexture2D );
    virtual HRESULT CreateDebug( CDebug ** ppDebug );
    virtual HRESULT CreateInfoQueue( CInfoQueue ** ppInfoQueue );
    virtual HRESULT CreateMultithread( CMultithread ** ppMultithread );
    virtual HRESULT CreateSwitchToRef( CSwitchToRef **ppSwitchToRef );
};


////////////////////////////////////////////////////////////
//
// C10Multithread
//
////////////////////////////////////////////////////////////

class C10Multithread : public CMultithread
{
    ID3D10Multithread *m_pMultithread;

public:
    C10Multithread( ID3D10Multithread *pMultithread );
    virtual ~C10Multithread();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubMultithread( int index, CMultithread *pMultithread ) {}
    virtual CMultithread *Src() { return NULL; }
    virtual CMultithread *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pMultithread; }

    //
    // CMultithread Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Multithread **pInterface ) { *pInterface = (ID3D10Multithread *) m_pMultithread; }
    virtual CMultithread *GetSubMultithread( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // Enter
    ////////////////////////////////////////////////////////////
    void Enter(  );

    ////////////////////////////////////////////////////////////
    // Leave
    ////////////////////////////////////////////////////////////
    void Leave(  );

    ////////////////////////////////////////////////////////////
    // SetMultithreadProtected
    ////////////////////////////////////////////////////////////
    BOOL SetMultithreadProtected(  BOOL bMTProtect );

    ////////////////////////////////////////////////////////////
    // GetMultithreadProtected
    ////////////////////////////////////////////////////////////
    BOOL GetMultithreadProtected(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10Debug
//
////////////////////////////////////////////////////////////

class C10Debug : public CDebug
{
    ID3D10Debug *m_pDebug;

public:
    C10Debug( ID3D10Debug *pDebug );
    virtual ~C10Debug();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubDebug( int index, CDebug *pDebug ) {}
    virtual CDebug *Src() { return NULL; }
    virtual CDebug *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pDebug; }

    //
    // CDebug Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Debug **pInterface ) { *pInterface = (ID3D10Debug *) m_pDebug; }
    virtual CDebug *GetSubDebug( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // SetFeatureMask
    ////////////////////////////////////////////////////////////
    NRESULT SetFeatureMask(  UINT Mask );

    ////////////////////////////////////////////////////////////
    // GetFeatureMask
    ////////////////////////////////////////////////////////////
    UINT GetFeatureMask(  );

    ////////////////////////////////////////////////////////////
    // SetPresentPerRenderOpDelay
    ////////////////////////////////////////////////////////////
    NRESULT SetPresentPerRenderOpDelay(  UINT Milliseconds );

    ////////////////////////////////////////////////////////////
    // GetPresentPerRenderOpDelay
    ////////////////////////////////////////////////////////////
    UINT GetPresentPerRenderOpDelay(  );

    ////////////////////////////////////////////////////////////
    // SetSwapChain
    ////////////////////////////////////////////////////////////
    NRESULT SetSwapChain(  IDXGISwapChain * pSwapChain );

    ////////////////////////////////////////////////////////////
    // GetSwapChain
    ////////////////////////////////////////////////////////////
    NRESULT GetSwapChain(  IDXGISwapChain ** ppSwapChain );

    ////////////////////////////////////////////////////////////
    // Validate
    ////////////////////////////////////////////////////////////
    NRESULT Validate(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10SwitchToRef
//
////////////////////////////////////////////////////////////

class C10SwitchToRef : public CSwitchToRef
{
    ID3D10SwitchToRef *m_pSwitchToRef;

public:
    C10SwitchToRef( ID3D10SwitchToRef *pSwitchToRef );
    virtual ~C10SwitchToRef();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubSwitchToRef( int index, CSwitchToRef *pSwitchToRef ) {}
    virtual CSwitchToRef *Src() { return NULL; }
    virtual CSwitchToRef *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pSwitchToRef; }

    //
    // CSwitchToRef Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10SwitchToRef **pInterface ) { *pInterface = (ID3D10SwitchToRef *) m_pSwitchToRef; }
    virtual CSwitchToRef *GetSubSwitchToRef( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // SetUseRef
    ////////////////////////////////////////////////////////////
    BOOL SetUseRef(  BOOL UseRef );

    ////////////////////////////////////////////////////////////
    // GetUseRef
    ////////////////////////////////////////////////////////////
    BOOL GetUseRef(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10InfoQueue
//
////////////////////////////////////////////////////////////

class C10InfoQueue : public CInfoQueue
{
    ID3D10InfoQueue *m_pInfoQueue;

public:
    C10InfoQueue( ID3D10InfoQueue *pInfoQueue );
    virtual ~C10InfoQueue();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubInfoQueue( int index, CInfoQueue *pInfoQueue ) {}
    virtual CInfoQueue *Src() { return NULL; }
    virtual CInfoQueue *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pInfoQueue; }

    //
    // CInfoQueue Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10InfoQueue **pInterface ) { *pInterface = (ID3D10InfoQueue *) m_pInfoQueue; }
    virtual CInfoQueue *GetSubInfoQueue( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // SetMessageCountLimit
    ////////////////////////////////////////////////////////////
    NRESULT SetMessageCountLimit(  UINT64 MessageCountLimit );

    ////////////////////////////////////////////////////////////
    // ClearStoredMessages
    ////////////////////////////////////////////////////////////
    void ClearStoredMessages(  );

    ////////////////////////////////////////////////////////////
    // GetMessage
    ////////////////////////////////////////////////////////////
    NRESULT GetMessage(  UINT64 MessageIndex, D3D_MESSAGE * pMessage, SIZE_T * pMessageByteLength );

    ////////////////////////////////////////////////////////////
    // GetNumMessagesAllowedByStorageFilter
    ////////////////////////////////////////////////////////////
    UINT64 GetNumMessagesAllowedByStorageFilter(  );

    ////////////////////////////////////////////////////////////
    // GetNumMessagesDeniedByStorageFilter
    ////////////////////////////////////////////////////////////
    UINT64 GetNumMessagesDeniedByStorageFilter(  );

    ////////////////////////////////////////////////////////////
    // GetNumStoredMessages
    ////////////////////////////////////////////////////////////
    UINT64 GetNumStoredMessages(  );

    ////////////////////////////////////////////////////////////
    // GetNumStoredMessagesAllowedByRetrievalFilter
    ////////////////////////////////////////////////////////////
    UINT64 GetNumStoredMessagesAllowedByRetrievalFilter(  );

    ////////////////////////////////////////////////////////////
    // GetNumMessagesDiscardedByMessageCountLimit
    ////////////////////////////////////////////////////////////
    UINT64 GetNumMessagesDiscardedByMessageCountLimit(  );

    ////////////////////////////////////////////////////////////
    // GetMessageCountLimit
    ////////////////////////////////////////////////////////////
    UINT64 GetMessageCountLimit(  );

    ////////////////////////////////////////////////////////////
    // AddStorageFilterEntries
    ////////////////////////////////////////////////////////////
    NRESULT AddStorageFilterEntries(  D3D_INFO_QUEUE_FILTER * pFilter );

    ////////////////////////////////////////////////////////////
    // GetStorageFilter
    ////////////////////////////////////////////////////////////
    NRESULT GetStorageFilter(  D3D_INFO_QUEUE_FILTER * pFilter, SIZE_T * pFilterByteLength );

    ////////////////////////////////////////////////////////////
    // ClearStorageFilter
    ////////////////////////////////////////////////////////////
    void ClearStorageFilter(  );

    ////////////////////////////////////////////////////////////
    // PushEmptyStorageFilter
    ////////////////////////////////////////////////////////////
    NRESULT PushEmptyStorageFilter(  );

    ////////////////////////////////////////////////////////////
    // PushCopyOfStorageFilter
    ////////////////////////////////////////////////////////////
    NRESULT PushCopyOfStorageFilter(  );

    ////////////////////////////////////////////////////////////
    // PushStorageFilter
    ////////////////////////////////////////////////////////////
    NRESULT PushStorageFilter(  D3D_INFO_QUEUE_FILTER * pFilter );

    ////////////////////////////////////////////////////////////
    // PopStorageFilter
    ////////////////////////////////////////////////////////////
    void PopStorageFilter(  );

    ////////////////////////////////////////////////////////////
    // GetStorageFilterStackSize
    ////////////////////////////////////////////////////////////
    UINT GetStorageFilterStackSize(  );

    ////////////////////////////////////////////////////////////
    // AddRetrievalFilterEntries
    ////////////////////////////////////////////////////////////
    NRESULT AddRetrievalFilterEntries(  D3D_INFO_QUEUE_FILTER * pFilter );

    ////////////////////////////////////////////////////////////
    // GetRetrievalFilter
    ////////////////////////////////////////////////////////////
    NRESULT GetRetrievalFilter(  D3D_INFO_QUEUE_FILTER * pFilter, SIZE_T * pFilterByteLength );

    ////////////////////////////////////////////////////////////
    // ClearRetrievalFilter
    ////////////////////////////////////////////////////////////
    void ClearRetrievalFilter(  );

    ////////////////////////////////////////////////////////////
    // PushEmptyRetrievalFilter
    ////////////////////////////////////////////////////////////
    NRESULT PushEmptyRetrievalFilter(  );

    ////////////////////////////////////////////////////////////
    // PushCopyOfRetrievalFilter
    ////////////////////////////////////////////////////////////
    NRESULT PushCopyOfRetrievalFilter(  );

    ////////////////////////////////////////////////////////////
    // PushRetrievalFilter
    ////////////////////////////////////////////////////////////
    NRESULT PushRetrievalFilter(  D3D_INFO_QUEUE_FILTER * pFilter );

    ////////////////////////////////////////////////////////////
    // PopRetrievalFilter
    ////////////////////////////////////////////////////////////
    void PopRetrievalFilter(  );

    ////////////////////////////////////////////////////////////
    // GetRetrievalFilterStackSize
    ////////////////////////////////////////////////////////////
    UINT GetRetrievalFilterStackSize(  );

    ////////////////////////////////////////////////////////////
    // AddMessage
    ////////////////////////////////////////////////////////////
    NRESULT AddMessage(  D3D_MESSAGE_CATEGORY Category, D3D_MESSAGE_SEVERITY Severity, D3D_MESSAGE_ID ID, LPCSTR pDescription );

    ////////////////////////////////////////////////////////////
    // AddApplicationMessage
    ////////////////////////////////////////////////////////////
    NRESULT AddApplicationMessage(  D3D_MESSAGE_SEVERITY Severity, LPCSTR pDescription );

    ////////////////////////////////////////////////////////////
    // SetBreakOnCategory
    ////////////////////////////////////////////////////////////
    NRESULT SetBreakOnCategory(  D3D_MESSAGE_CATEGORY Category, BOOL bEnable );

    ////////////////////////////////////////////////////////////
    // SetBreakOnSeverity
    ////////////////////////////////////////////////////////////
    NRESULT SetBreakOnSeverity(  D3D_MESSAGE_SEVERITY Severity, BOOL bEnable );

    ////////////////////////////////////////////////////////////
    // SetBreakOnID
    ////////////////////////////////////////////////////////////
    NRESULT SetBreakOnID(  D3D_MESSAGE_ID ID, BOOL bEnable );

    ////////////////////////////////////////////////////////////
    // GetBreakOnCategory
    ////////////////////////////////////////////////////////////
    BOOL GetBreakOnCategory(  D3D_MESSAGE_CATEGORY Category );

    ////////////////////////////////////////////////////////////
    // GetBreakOnSeverity
    ////////////////////////////////////////////////////////////
    BOOL GetBreakOnSeverity(  D3D_MESSAGE_SEVERITY Severity );

    ////////////////////////////////////////////////////////////
    // GetBreakOnID
    ////////////////////////////////////////////////////////////
    BOOL GetBreakOnID(  D3D_MESSAGE_ID ID );

    ////////////////////////////////////////////////////////////
    // SetMuteDebugOutput
    ////////////////////////////////////////////////////////////
    void SetMuteDebugOutput(  BOOL bMute );

    ////////////////////////////////////////////////////////////
    // GetMuteDebugOutput
    ////////////////////////////////////////////////////////////
    BOOL GetMuteDebugOutput(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10Blob
//
////////////////////////////////////////////////////////////

class C10Blob : public CBlob
{
    ID3D10Blob *m_pBlob;

public:
    C10Blob( ID3D10Blob *pBlob );
    virtual ~C10Blob();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubBlob( int index, CBlob *pBlob ) {}
    virtual CBlob *Src() { return NULL; }
    virtual CBlob *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pBlob; }

    //
    // CBlob Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Blob **pInterface ) { *pInterface = (ID3D10Blob *) m_pBlob; }
    virtual CBlob *GetSubBlob( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // QueryInterface
    ////////////////////////////////////////////////////////////
    NRESULT QueryInterface(  REFIID iid, LPVOID * ppv );

    ////////////////////////////////////////////////////////////
    // GetBufferPointer
    ////////////////////////////////////////////////////////////
    LPVOID GetBufferPointer(  );

    ////////////////////////////////////////////////////////////
    // GetBufferSize
    ////////////////////////////////////////////////////////////
    SIZE_T GetBufferSize(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10BlendState1
//
////////////////////////////////////////////////////////////

class C10BlendState1 : public CBlendState1, public C10BlendState
{
    ID3D10BlendState1 *m_pBlendState1;

public:
    C10BlendState1( ID3D10BlendState1 *pBlendState1 );
    virtual ~C10BlendState1();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubBlendState1( int index, CBlendState1 *pBlendState1 ) {}
    void SetSubBlendState( int index, CBlendState *pBlendState ) {}
    virtual CBlendState1 *Src() { return NULL; }
    virtual CBlendState1 *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pBlendState1; }

    //
    // CBlendState1 Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10BlendState1 **pInterface ) { *pInterface = (ID3D10BlendState1 *) m_pBlendState1; }
    virtual CBlendState1 *GetSubBlendState1( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDesc1
    ////////////////////////////////////////////////////////////
    void GetDesc1(  D3D_BLEND_DESC1 * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CBlendState Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10BlendState **pInterface ) { *pInterface = (ID3D10BlendState *) m_pBlendState1; }
    virtual CBlendState *GetSubBlendState( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_BLEND_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pBlendState1; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10ShaderResourceView1
//
////////////////////////////////////////////////////////////

class C10ShaderResourceView1 : public CShaderResourceView1, public C10ShaderResourceView
{
    ID3D10ShaderResourceView1 *m_pShaderResourceView1;

public:
    C10ShaderResourceView1( ID3D10ShaderResourceView1 *pShaderResourceView1 );
    virtual ~C10ShaderResourceView1();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubShaderResourceView1( int index, CShaderResourceView1 *pShaderResourceView1 ) {}
    void SetSubShaderResourceView( int index, CShaderResourceView *pShaderResourceView ) {}
    virtual CShaderResourceView1 *Src() { return NULL; }
    virtual CShaderResourceView1 *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pShaderResourceView1; }

    //
    // CShaderResourceView1 Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10ShaderResourceView1 **pInterface ) { *pInterface = (ID3D10ShaderResourceView1 *) m_pShaderResourceView1; }
    virtual CShaderResourceView1 *GetSubShaderResourceView1( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDesc1
    ////////////////////////////////////////////////////////////
    void GetDesc1(  D3D_SHADER_RESOURCE_VIEW_DESC1 * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CShaderResourceView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10ShaderResourceView **pInterface ) { *pInterface = (ID3D10ShaderResourceView *) m_pShaderResourceView1; }
    virtual CShaderResourceView *GetSubShaderResourceView( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_SHADER_RESOURCE_VIEW_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10View **pInterface ) { *pInterface = (ID3D10View *) m_pShaderResourceView1; }
    virtual CView *GetSubView( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetResource
    ////////////////////////////////////////////////////////////
    void GetResource(  CResource ** ppResource );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { *pInterface = (ID3D10DeviceChild *) m_pShaderResourceView1; }
    virtual CDeviceChild *GetSubDeviceChild( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// C10Device1
//
////////////////////////////////////////////////////////////

class C10Device1 : public C10Device
{
    ID3D10Device1 *m_pDevice1;

public:
    C10Device1( ID3D10Device1 *pDevice1 );
    virtual ~C10Device1();

    ////////////////////////////////////////////////////////////
    // Sub object accessor overrides.
    // These functions return NULL since this is a non-multi class.
    ////////////////////////////////////////////////////////////
    virtual int GetSubObjectCount() const { return 0; }
    void SetSubDevice( int index, CDevice *pDevice ) {}
    virtual CDevice *Src() { return NULL; }
    virtual CDevice *Ref() { return NULL; }
    virtual IUnknown *GetIUnknown() { return m_pDevice1; }

    //
    // CDevice1 Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Device1 **pInterface ) { *pInterface = (ID3D10Device1 *) m_pDevice1; }

    ////////////////////////////////////////////////////////////
    // CreateShaderResourceView1
    ////////////////////////////////////////////////////////////
    NRESULT CreateShaderResourceView1(  CResource * pResource, const D3D_SHADER_RESOURCE_VIEW_DESC1 * pDesc, CShaderResourceView1 ** ppSRView );

    ////////////////////////////////////////////////////////////
    // CreateBlendState1
    ////////////////////////////////////////////////////////////
    NRESULT CreateBlendState1(  const D3D_BLEND_DESC1 * pBlendStateDesc, CBlendState1 ** ppBlendState );

    ////////////////////////////////////////////////////////////
    // GetFeatureLevel
    ////////////////////////////////////////////////////////////
    D3D_FEATURE_LEVEL1 GetFeatureLevel(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDevice Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    virtual void GetInterfacePtr( ID3D10Device **pInterface ) { *pInterface = (ID3D10Device *) m_pDevice1; }
    virtual CDevice *GetSubDevice( int index ) { return NULL; }

    ////////////////////////////////////////////////////////////
    // VSSetConstantBuffers
    ////////////////////////////////////////////////////////////
    void VSSetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer *const * ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // PSSetShaderResources
    ////////////////////////////////////////////////////////////
    void PSSetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView *const * ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // PSSetShader
    ////////////////////////////////////////////////////////////
    void PSSetShader(  CPixelShader * pPixelShader );

    ////////////////////////////////////////////////////////////
    // PSSetSamplers
    ////////////////////////////////////////////////////////////
    void PSSetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState *const * ppSamplers );

    ////////////////////////////////////////////////////////////
    // VSSetShader
    ////////////////////////////////////////////////////////////
    void VSSetShader(  CVertexShader * pVertexShader );

    ////////////////////////////////////////////////////////////
    // DrawIndexed
    ////////////////////////////////////////////////////////////
    void DrawIndexed(  UINT IndexCount, UINT StartIndexLocation, INT BaseVertexLocation );

    ////////////////////////////////////////////////////////////
    // Draw
    ////////////////////////////////////////////////////////////
    void Draw(  UINT VertexCount, UINT StartVertexLocation );

    ////////////////////////////////////////////////////////////
    // PSSetConstantBuffers
    ////////////////////////////////////////////////////////////
    void PSSetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer *const * ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // IASetInputLayout
    ////////////////////////////////////////////////////////////
    void IASetInputLayout(  CInputLayout * pInputLayout );

    ////////////////////////////////////////////////////////////
    // IASetVertexBuffers
    ////////////////////////////////////////////////////////////
    void IASetVertexBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer *const * ppVertexBuffers, const UINT * pStrides, const UINT * pOffsets );

    ////////////////////////////////////////////////////////////
    // IASetIndexBuffer
    ////////////////////////////////////////////////////////////
    void IASetIndexBuffer(  CBuffer * pIndexBuffer, DXGI_FORMAT Format, UINT Offset );

    ////////////////////////////////////////////////////////////
    // DrawIndexedInstanced
    ////////////////////////////////////////////////////////////
    void DrawIndexedInstanced(  UINT IndexCountPerInstance, UINT InstanceCount, UINT StartIndexLocation, INT BaseVertexLocation, UINT StartInstanceLocation );

    ////////////////////////////////////////////////////////////
    // DrawInstanced
    ////////////////////////////////////////////////////////////
    void DrawInstanced(  UINT VertexCountPerInstance, UINT InstanceCount, UINT StartVertexLocation, UINT StartInstanceLocation );

    ////////////////////////////////////////////////////////////
    // GSSetConstantBuffers
    ////////////////////////////////////////////////////////////
    void GSSetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer *const * ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // GSSetShader
    ////////////////////////////////////////////////////////////
    void GSSetShader(  CGeometryShader * pShader );

    ////////////////////////////////////////////////////////////
    // IASetPrimitiveTopology
    ////////////////////////////////////////////////////////////
    void IASetPrimitiveTopology(  D3D_PRIMITIVE_TOPOLOGY Topology );

    ////////////////////////////////////////////////////////////
    // VSSetShaderResources
    ////////////////////////////////////////////////////////////
    void VSSetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView *const * ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // VSSetSamplers
    ////////////////////////////////////////////////////////////
    void VSSetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState *const * ppSamplers );

    ////////////////////////////////////////////////////////////
    // SetPredication
    ////////////////////////////////////////////////////////////
    void SetPredication(  CPredicate * pPredicate, BOOL PredicateValue );

    ////////////////////////////////////////////////////////////
    // GSSetShaderResources
    ////////////////////////////////////////////////////////////
    void GSSetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView *const * ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // GSSetSamplers
    ////////////////////////////////////////////////////////////
    void GSSetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState *const * ppSamplers );

    ////////////////////////////////////////////////////////////
    // OMSetRenderTargets
    ////////////////////////////////////////////////////////////
    void OMSetRenderTargets(  UINT NumViews, CRenderTargetView *const * ppRenderTargetViews, CDepthStencilView * pDepthStencilView );

    ////////////////////////////////////////////////////////////
    // OMSetBlendState
    ////////////////////////////////////////////////////////////
    void OMSetBlendState(  CBlendState * pBlendState, const FLOAT BlendFactor[4], UINT SampleMask );

    ////////////////////////////////////////////////////////////
    // OMSetDepthStencilState
    ////////////////////////////////////////////////////////////
    void OMSetDepthStencilState(  CDepthStencilState * pDepthStencilState, UINT StencilRef );

    ////////////////////////////////////////////////////////////
    // SOSetTargets
    ////////////////////////////////////////////////////////////
    void SOSetTargets(  UINT NumBuffers, CBuffer *const * ppSOTargets, const UINT * pOffsets );

    ////////////////////////////////////////////////////////////
    // DrawAuto
    ////////////////////////////////////////////////////////////
    void DrawAuto(  );

    ////////////////////////////////////////////////////////////
    // RSSetState
    ////////////////////////////////////////////////////////////
    void RSSetState(  CRasterizerState * pRasterizerState );

    ////////////////////////////////////////////////////////////
    // RSSetViewports
    ////////////////////////////////////////////////////////////
    void RSSetViewports(  UINT NumViewports, const D3D_VIEWPORT * pViewports );

    ////////////////////////////////////////////////////////////
    // RSSetScissorRects
    ////////////////////////////////////////////////////////////
    void RSSetScissorRects(  UINT NumRects, const D3D_RECT * pRects );

    ////////////////////////////////////////////////////////////
    // CopySubresourceRegion
    ////////////////////////////////////////////////////////////
    void CopySubresourceRegion(  CResource * pDstResource, UINT DstSubresource, UINT DstX, UINT DstY, UINT DstZ, CResource * pSrcResource, UINT SrcSubresource, const D3D_BOX * pSrcBox );

    ////////////////////////////////////////////////////////////
    // CopyResource
    ////////////////////////////////////////////////////////////
    void CopyResource(  CResource * pDstResource, CResource * pSrcResource );

    ////////////////////////////////////////////////////////////
    // UpdateSubresource
    ////////////////////////////////////////////////////////////
    void UpdateSubresource(  CResource * pDstResource, UINT DstSubresource, const D3D_BOX * pDstBox, const void * pSrcData, UINT SrcRowPitch, UINT SrcDepthPitch );

    ////////////////////////////////////////////////////////////
    // ClearRenderTargetView
    ////////////////////////////////////////////////////////////
    void ClearRenderTargetView(  CRenderTargetView * pRenderTargetView, const FLOAT ColorRGBA[4] );

    ////////////////////////////////////////////////////////////
    // ClearDepthStencilView
    ////////////////////////////////////////////////////////////
    void ClearDepthStencilView(  CDepthStencilView * pDepthStencilView, UINT ClearFlags, FLOAT Depth, UINT8 Stencil );

    ////////////////////////////////////////////////////////////
    // GenerateMips
    ////////////////////////////////////////////////////////////
    void GenerateMips(  CShaderResourceView * pShaderResourceView );

    ////////////////////////////////////////////////////////////
    // ResolveSubresource
    ////////////////////////////////////////////////////////////
    void ResolveSubresource(  CResource * pDstResource, UINT DstSubresource, CResource * pSrcResource, UINT SrcSubresource, DXGI_FORMAT Format );

    ////////////////////////////////////////////////////////////
    // VSGetConstantBuffers
    ////////////////////////////////////////////////////////////
    void VSGetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer ** ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // PSGetShaderResources
    ////////////////////////////////////////////////////////////
    void PSGetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView ** ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // PSGetShader
    ////////////////////////////////////////////////////////////
    void PSGetShader(  CPixelShader ** ppPixelShader );

    ////////////////////////////////////////////////////////////
    // PSGetSamplers
    ////////////////////////////////////////////////////////////
    void PSGetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState ** ppSamplers );

    ////////////////////////////////////////////////////////////
    // VSGetShader
    ////////////////////////////////////////////////////////////
    void VSGetShader(  CVertexShader ** ppVertexShader );

    ////////////////////////////////////////////////////////////
    // PSGetConstantBuffers
    ////////////////////////////////////////////////////////////
    void PSGetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer ** ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // IAGetInputLayout
    ////////////////////////////////////////////////////////////
    void IAGetInputLayout(  CInputLayout ** ppInputLayout );

    ////////////////////////////////////////////////////////////
    // IAGetVertexBuffers
    ////////////////////////////////////////////////////////////
    void IAGetVertexBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer ** ppVertexBuffers, UINT * pStrides, UINT * pOffsets );

    ////////////////////////////////////////////////////////////
    // IAGetIndexBuffer
    ////////////////////////////////////////////////////////////
    void IAGetIndexBuffer(  CBuffer ** pIndexBuffer, DXGI_FORMAT * Format, UINT * Offset );

    ////////////////////////////////////////////////////////////
    // GSGetConstantBuffers
    ////////////////////////////////////////////////////////////
    void GSGetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer ** ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // GSGetShader
    ////////////////////////////////////////////////////////////
    void GSGetShader(  CGeometryShader ** ppGeometryShader );

    ////////////////////////////////////////////////////////////
    // IAGetPrimitiveTopology
    ////////////////////////////////////////////////////////////
    void IAGetPrimitiveTopology(  D3D_PRIMITIVE_TOPOLOGY * pTopology );

    ////////////////////////////////////////////////////////////
    // VSGetShaderResources
    ////////////////////////////////////////////////////////////
    void VSGetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView ** ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // VSGetSamplers
    ////////////////////////////////////////////////////////////
    void VSGetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState ** ppSamplers );

    ////////////////////////////////////////////////////////////
    // GetPredication
    ////////////////////////////////////////////////////////////
    void GetPredication(  CPredicate ** ppPredicate, BOOL * pPredicateValue );

    ////////////////////////////////////////////////////////////
    // GSGetShaderResources
    ////////////////////////////////////////////////////////////
    void GSGetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView ** ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // GSGetSamplers
    ////////////////////////////////////////////////////////////
    void GSGetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState ** ppSamplers );

    ////////////////////////////////////////////////////////////
    // OMGetRenderTargets
    ////////////////////////////////////////////////////////////
    void OMGetRenderTargets(  UINT NumViews, CRenderTargetView ** ppRenderTargetViews, CDepthStencilView ** ppDepthStencilView );

    ////////////////////////////////////////////////////////////
    // OMGetBlendState
    ////////////////////////////////////////////////////////////
    void OMGetBlendState(  CBlendState ** ppBlendState, FLOAT BlendFactor[4], UINT * pSampleMask );

    ////////////////////////////////////////////////////////////
    // OMGetDepthStencilState
    ////////////////////////////////////////////////////////////
    void OMGetDepthStencilState(  CDepthStencilState ** ppDepthStencilState, UINT * pStencilRef );

    ////////////////////////////////////////////////////////////
    // SOGetTargets
    ////////////////////////////////////////////////////////////
    void SOGetTargets(  UINT NumBuffers, CBuffer ** ppSOTargets, UINT * pOffsets );

    ////////////////////////////////////////////////////////////
    // RSGetState
    ////////////////////////////////////////////////////////////
    void RSGetState(  CRasterizerState ** ppRasterizerState );

    ////////////////////////////////////////////////////////////
    // RSGetViewports
    ////////////////////////////////////////////////////////////
    void RSGetViewports(  UINT * NumViewports, D3D_VIEWPORT * pViewports );

    ////////////////////////////////////////////////////////////
    // RSGetScissorRects
    ////////////////////////////////////////////////////////////
    void RSGetScissorRects(  UINT * NumRects, D3D_RECT * pRects );

    ////////////////////////////////////////////////////////////
    // GetDeviceRemovedReason
    ////////////////////////////////////////////////////////////
    NRESULT GetDeviceRemovedReason(  );

    ////////////////////////////////////////////////////////////
    // SetExceptionMode
    ////////////////////////////////////////////////////////////
    NRESULT SetExceptionMode(  UINT RaiseFlags );

    ////////////////////////////////////////////////////////////
    // GetExceptionMode
    ////////////////////////////////////////////////////////////
    UINT GetExceptionMode(  );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );

    ////////////////////////////////////////////////////////////
    // ClearState
    ////////////////////////////////////////////////////////////
    void ClearState(  );

    ////////////////////////////////////////////////////////////
    // Flush
    ////////////////////////////////////////////////////////////
    void Flush(  );

    ////////////////////////////////////////////////////////////
    // CreateBuffer
    ////////////////////////////////////////////////////////////
    NRESULT CreateBuffer(  const D3D_BUFFER_DESC * pDesc, const D3D_SUBRESOURCE_DATA * pInitialData, CBuffer ** ppBuffer );

    ////////////////////////////////////////////////////////////
    // CreateTexture1D
    ////////////////////////////////////////////////////////////
    NRESULT CreateTexture1D(  const D3D_TEXTURE1D_DESC * pDesc, const D3D_SUBRESOURCE_DATA * pInitialData, CTexture1D ** ppTexture1D );

    ////////////////////////////////////////////////////////////
    // CreateTexture2D
    ////////////////////////////////////////////////////////////
    NRESULT CreateTexture2D(  const D3D_TEXTURE2D_DESC * pDesc, const D3D_SUBRESOURCE_DATA * pInitialData, CTexture2D ** ppTexture2D );

    ////////////////////////////////////////////////////////////
    // CreateTexture3D
    ////////////////////////////////////////////////////////////
    NRESULT CreateTexture3D(  const D3D_TEXTURE3D_DESC * pDesc, const D3D_SUBRESOURCE_DATA * pInitialData, CTexture3D ** ppTexture3D );

    ////////////////////////////////////////////////////////////
    // CreateShaderResourceView
    ////////////////////////////////////////////////////////////
    NRESULT CreateShaderResourceView(  CResource * pResource, const D3D_SHADER_RESOURCE_VIEW_DESC * pDesc, CShaderResourceView ** ppSRView );

    ////////////////////////////////////////////////////////////
    // CreateRenderTargetView
    ////////////////////////////////////////////////////////////
    NRESULT CreateRenderTargetView(  CResource * pResource, const D3D_RENDER_TARGET_VIEW_DESC * pDesc, CRenderTargetView ** ppRTView );

    ////////////////////////////////////////////////////////////
    // CreateDepthStencilView
    ////////////////////////////////////////////////////////////
    NRESULT CreateDepthStencilView(  CResource * pResource, const D3D_DEPTH_STENCIL_VIEW_DESC * pDesc, CDepthStencilView ** ppDepthStencilView );

    ////////////////////////////////////////////////////////////
    // CreateInputLayout
    ////////////////////////////////////////////////////////////
    NRESULT CreateInputLayout(  const D3D_INPUT_ELEMENT_DESC * pInputElementDescs, UINT NumElements, const void * pShaderBytecodeWithInputSignature, SIZE_T BytecodeLength, CInputLayout ** ppInputLayout );

    ////////////////////////////////////////////////////////////
    // CreateVertexShader
    ////////////////////////////////////////////////////////////
    NRESULT CreateVertexShader(  const void * pShaderBytecode, SIZE_T BytecodeLength, CVertexShader ** ppVertexShader );

    ////////////////////////////////////////////////////////////
    // CreateGeometryShader
    ////////////////////////////////////////////////////////////
    NRESULT CreateGeometryShader(  const void * pShaderBytecode, SIZE_T BytecodeLength, CGeometryShader ** ppGeometryShader );

    ////////////////////////////////////////////////////////////
    // CreateGeometryShaderWithStreamOutput
    ////////////////////////////////////////////////////////////
    NRESULT CreateGeometryShaderWithStreamOutput(  const void * pShaderBytecode, SIZE_T BytecodeLength, const D3D_SO_DECLARATION_ENTRY * pSODeclaration, UINT NumEntries, UINT OutputStreamStride, CGeometryShader ** ppGeometryShader );

    ////////////////////////////////////////////////////////////
    // CreatePixelShader
    ////////////////////////////////////////////////////////////
    NRESULT CreatePixelShader(  const void * pShaderBytecode, SIZE_T BytecodeLength, CPixelShader ** ppPixelShader );

    ////////////////////////////////////////////////////////////
    // CreateBlendState
    ////////////////////////////////////////////////////////////
    NRESULT CreateBlendState(  const D3D_BLEND_DESC * pBlendStateDesc, CBlendState ** ppBlendState );

    ////////////////////////////////////////////////////////////
    // CreateDepthStencilState
    ////////////////////////////////////////////////////////////
    NRESULT CreateDepthStencilState(  const D3D_DEPTH_STENCIL_DESC * pDepthStencilDesc, CDepthStencilState ** ppDepthStencilState );

    ////////////////////////////////////////////////////////////
    // CreateRasterizerState
    ////////////////////////////////////////////////////////////
    NRESULT CreateRasterizerState(  const D3D_RASTERIZER_DESC * pRasterizerDesc, CRasterizerState ** ppRasterizerState );

    ////////////////////////////////////////////////////////////
    // CreateSamplerState
    ////////////////////////////////////////////////////////////
    NRESULT CreateSamplerState(  const D3D_SAMPLER_DESC * pSamplerDesc, CSamplerState ** ppSamplerState );

    ////////////////////////////////////////////////////////////
    // CreateQuery
    ////////////////////////////////////////////////////////////
    NRESULT CreateQuery(  const D3D_QUERY_DESC * pQueryDesc, CQuery ** ppQuery );

    ////////////////////////////////////////////////////////////
    // CreatePredicate
    ////////////////////////////////////////////////////////////
    NRESULT CreatePredicate(  const D3D_QUERY_DESC * pPredicateDesc, CPredicate ** ppPredicate );

    ////////////////////////////////////////////////////////////
    // CreateCounter
    ////////////////////////////////////////////////////////////
    NRESULT CreateCounter(  const D3D_COUNTER_DESC * pCounterDesc, CCounter ** ppCounter );

    ////////////////////////////////////////////////////////////
    // CheckFormatSupport
    ////////////////////////////////////////////////////////////
    NRESULT CheckFormatSupport(  DXGI_FORMAT Format, UINT * pFormatSupport );

    ////////////////////////////////////////////////////////////
    // CheckMultisampleQualityLevels
    ////////////////////////////////////////////////////////////
    NRESULT CheckMultisampleQualityLevels(  DXGI_FORMAT Format, UINT SampleCount, UINT * pNumQualityLevels );

    ////////////////////////////////////////////////////////////
    // CheckCounterInfo
    ////////////////////////////////////////////////////////////
    void CheckCounterInfo(  D3D_COUNTER_INFO * pCounterInfo );

    ////////////////////////////////////////////////////////////
    // CheckCounter
    ////////////////////////////////////////////////////////////
    NRESULT CheckCounter(  const D3D_COUNTER_DESC * pDesc, D3D_COUNTER_TYPE * pType, UINT * pActiveCounters, LPSTR szName, UINT * pNameLength, LPSTR szUnits, UINT * pUnitsLength, LPSTR szDescription, UINT * pDescriptionLength );

    ////////////////////////////////////////////////////////////
    // GetCreationFlags
    ////////////////////////////////////////////////////////////
    UINT GetCreationFlags(  );

    ////////////////////////////////////////////////////////////
    // OpenSharedResource
    ////////////////////////////////////////////////////////////
    NRESULT OpenSharedResource(  HANDLE hResource, REFIID ReturnedInterface, void ** ppResource );

    ////////////////////////////////////////////////////////////
    // SetTextFilterSize
    ////////////////////////////////////////////////////////////
    void SetTextFilterSize(  UINT Width, UINT Height );

    ////////////////////////////////////////////////////////////
    // GetTextFilterSize
    ////////////////////////////////////////////////////////////
    void GetTextFilterSize(  UINT * pWidth, UINT * pHeight );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
    virtual HRESULT CreateTexture2DFromSwapChain( IDXGISwapChain **ppSwapChain, CTexture2D ** ppTexture2D );
    virtual HRESULT CreateDebug( CDebug ** ppDebug );
    virtual HRESULT CreateInfoQueue( CInfoQueue ** ppInfoQueue );
    virtual HRESULT CreateMultithread( CMultithread ** ppMultithread );
    virtual HRESULT CreateSwitchToRef( CSwitchToRef **ppSwitchToRef );
};
