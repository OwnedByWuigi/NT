//*****************************************************************************
//***                        THIS FILE IS GENERATED                        ****
//***                       DO NOT MODIFY THIS FILE !!!                    ****
//*****************************************************************************
//*****************************************************************************
//* File: D3DEnumsInfo.cpp
//* 
//* Description: 
//*     Defines classes used to categorize enums
//*
//*****************************************************************************

// Ignore Prefast warnings 26060 (Range Precondition violation) and 28930 (Unused assignment of pointer variable)
#pragma warning( disable: 26060 )
#pragma warning( disable: 28930 )

#include "pch.h"
#include "D3DEnumsInfo.h"

//////////////////////////////////////////////////////////////////////////
// D3D_BIND_FLAG related definitions
//////////////////////////////////////////////////////////////////////////

tstring WGFTESTAPI ToString( D3D_BIND_FLAG D3DBindFlag )
{
	const D3DBindFlagInfo *pD3DBindFlagInfo = CD3DBindFlagInfoMap::Find( D3DBindFlag );
	
	if( pD3DBindFlagInfo )
		return tstring( pD3DBindFlagInfo->szName );
	else
		return tstring( _T( "(Unknown value)" ) );
}

//------------------------------------------------------------------------

bool WGFTESTAPI FromString( D3D_BIND_FLAG *pD3DBindFlag, const tstring &str )
{
	const D3DBindFlagInfo *pD3DBindFlagInfo = CD3DBindFlagInfoMap::Find( str );

	if( pD3DBindFlagInfo )
	{
		*pD3DBindFlag = pD3DBindFlagInfo->D3DBindFlag;
		return true;
	}

	//BUGBUG - elenakr - what to return for other enums ???
	//*pFormat = D3D_FORMAT_UNKNOWN;
	pD3DBindFlag = NULL;
	return false;
}

//------------------------------------------------------------------------

const D3DBindFlagInfo CD3DBindFlagInfoMap::m_D3DBindFlagInfoTable[] =
{
    { (D3D_BIND_FLAG) (0), _T( "0" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER), _T( "VERTEX_BUFFER" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER), _T( "VERTEX_BUFFER|INDEX_BUFFER" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER), _T( "VERTEX_BUFFER|CONSTANT_BUFFER" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_SHADER_RESOURCE), _T( "VERTEX_BUFFER|SHADER_RESOURCE" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|INDEX_BUFFER|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_VERTEX_BUFFER|D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER), _T( "INDEX_BUFFER" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER), _T( "INDEX_BUFFER|CONSTANT_BUFFER" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE), _T( "INDEX_BUFFER|SHADER_RESOURCE" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_STREAM_OUTPUT), _T( "INDEX_BUFFER|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT), _T( "INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|CONSTANT_BUFFER|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT), _T( "INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_INDEX_BUFFER|D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER), _T( "CONSTANT_BUFFER" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE), _T( "CONSTANT_BUFFER|SHADER_RESOURCE" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT), _T( "CONSTANT_BUFFER|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_RENDER_TARGET), _T( "CONSTANT_BUFFER|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT), _T( "CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET), _T( "CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_CONSTANT_BUFFER|D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_SHADER_RESOURCE), _T( "SHADER_RESOURCE" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT), _T( "SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET), _T( "SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_SHADER_RESOURCE|D3D_BIND_DEPTH_STENCIL), _T( "SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_SHADER_RESOURCE|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_SHADER_RESOURCE|D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_STREAM_OUTPUT), _T( "STREAM_OUTPUT" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET), _T( "STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_STREAM_OUTPUT|D3D_BIND_DEPTH_STENCIL), _T( "STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_STREAM_OUTPUT|D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_RENDER_TARGET), _T( "RENDER_TARGET" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_RENDER_TARGET|D3D_BIND_DEPTH_STENCIL), _T( "RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D_BIND_FLAG) (D3D_BIND_DEPTH_STENCIL), _T( "DEPTH_STENCIL" ) },

};

//------------------------------------------------------------------------

// Instantiate the singleton
CD3DBindFlagInfoMap CD3DBindFlagInfoMap::m_Map;

//------------------------------------------------------------------------

// Construct the lookup table.
CD3DBindFlagInfoMap::CD3DBindFlagInfoMap()
{
	size_t count = GetD3DBindFlagInfoTableSize();

	for(size_t i = 0; i < count; i++ )
	{
		m_ByValue.insert( ByValue::value_type( m_D3DBindFlagInfoTable[i].D3DBindFlag, &m_D3DBindFlagInfoTable[i] ) );
		m_ByDesc.insert( ByDesc::value_type( m_D3DBindFlagInfoTable[i].szName, &m_D3DBindFlagInfoTable[i] ) );
	}
}

//------------------------------------------------------------------------

const D3DBindFlagInfo *CD3DBindFlagInfoMap::Find( D3D_BIND_FLAG D3DBindFlag )
{
	ByValue::const_iterator it = m_Map.m_ByValue.find( D3DBindFlag );
	if( it == m_Map.m_ByValue.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const D3DBindFlagInfo *CD3DBindFlagInfoMap::Find( const tstring &Desc )
{
	ByDesc::const_iterator it = m_Map.m_ByDesc.find( Desc );
	if( it == m_Map.m_ByDesc.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const size_t CD3DBindFlagInfoMap::GetD3DBindFlagInfoTableSize()
{
	return sizeof(m_D3DBindFlagInfoTable) / sizeof(m_D3DBindFlagInfoTable[0]);
}


//////////////////////////////////////////////////////////////////////////
// D3D_CPU_ACCESS_FLAG related definitions
//////////////////////////////////////////////////////////////////////////

tstring WGFTESTAPI ToString( D3D_CPU_ACCESS_FLAG D3DCpuAccessFlag )
{
	const D3DCpuAccessFlagInfo *pD3DCpuAccessFlagInfo = CD3DCpuAccessFlagInfoMap::Find( D3DCpuAccessFlag );
	
	if( pD3DCpuAccessFlagInfo )
		return tstring( pD3DCpuAccessFlagInfo->szName );
	else
		return tstring( _T( "(Unknown value)" ) );
}

//------------------------------------------------------------------------

bool WGFTESTAPI FromString( D3D_CPU_ACCESS_FLAG *pD3DCpuAccessFlag, const tstring &str )
{
	const D3DCpuAccessFlagInfo *pD3DCpuAccessFlagInfo = CD3DCpuAccessFlagInfoMap::Find( str );

	if( pD3DCpuAccessFlagInfo )
	{
		*pD3DCpuAccessFlag = pD3DCpuAccessFlagInfo->D3DCpuAccessFlag;
		return true;
	}

	//BUGBUG - elenakr - what to return for other enums ???
	//*pFormat = D3D_FORMAT_UNKNOWN;
	pD3DCpuAccessFlag = NULL;
	return false;
}

//------------------------------------------------------------------------

const D3DCpuAccessFlagInfo CD3DCpuAccessFlagInfoMap::m_D3DCpuAccessFlagInfoTable[] =
{
    { (D3D_CPU_ACCESS_FLAG) (0), _T( "0" ) },
    { (D3D_CPU_ACCESS_FLAG) (D3D_CPU_ACCESS_WRITE), _T( "WRITE" ) },
    { (D3D_CPU_ACCESS_FLAG) (D3D_CPU_ACCESS_WRITE|D3D_CPU_ACCESS_READ), _T( "WRITE|READ" ) },
    { (D3D_CPU_ACCESS_FLAG) (D3D_CPU_ACCESS_READ), _T( "READ" ) },

};

//------------------------------------------------------------------------

// Instantiate the singleton
CD3DCpuAccessFlagInfoMap CD3DCpuAccessFlagInfoMap::m_Map;

//------------------------------------------------------------------------

// Construct the lookup table.
CD3DCpuAccessFlagInfoMap::CD3DCpuAccessFlagInfoMap()
{
	size_t count = GetD3DCpuAccessFlagInfoTableSize();

	for(size_t i = 0; i < count; i++ )
	{
		m_ByValue.insert( ByValue::value_type( m_D3DCpuAccessFlagInfoTable[i].D3DCpuAccessFlag, &m_D3DCpuAccessFlagInfoTable[i] ) );
		m_ByDesc.insert( ByDesc::value_type( m_D3DCpuAccessFlagInfoTable[i].szName, &m_D3DCpuAccessFlagInfoTable[i] ) );
	}
}

//------------------------------------------------------------------------

const D3DCpuAccessFlagInfo *CD3DCpuAccessFlagInfoMap::Find( D3D_CPU_ACCESS_FLAG D3DCpuAccessFlag )
{
	ByValue::const_iterator it = m_Map.m_ByValue.find( D3DCpuAccessFlag );
	if( it == m_Map.m_ByValue.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const D3DCpuAccessFlagInfo *CD3DCpuAccessFlagInfoMap::Find( const tstring &Desc )
{
	ByDesc::const_iterator it = m_Map.m_ByDesc.find( Desc );
	if( it == m_Map.m_ByDesc.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const size_t CD3DCpuAccessFlagInfoMap::GetD3DCpuAccessFlagInfoTableSize()
{
	return sizeof(m_D3DCpuAccessFlagInfoTable) / sizeof(m_D3DCpuAccessFlagInfoTable[0]);
}


//////////////////////////////////////////////////////////////////////////
// D3D_RESOURCE_MISC_FLAG related definitions
//////////////////////////////////////////////////////////////////////////

tstring WGFTESTAPI ToString( D3D_RESOURCE_MISC_FLAG D3DResourceMiscFlag )
{
	const D3DResourceMiscFlagInfo *pD3DResourceMiscFlagInfo = CD3DResourceMiscFlagInfoMap::Find( D3DResourceMiscFlag );
	
	if( pD3DResourceMiscFlagInfo )
		return tstring( pD3DResourceMiscFlagInfo->szName );
	else
		return tstring( _T( "(Unknown value)" ) );
}

//------------------------------------------------------------------------

bool WGFTESTAPI FromString( D3D_RESOURCE_MISC_FLAG *pD3DResourceMiscFlag, const tstring &str )
{
	const D3DResourceMiscFlagInfo *pD3DResourceMiscFlagInfo = CD3DResourceMiscFlagInfoMap::Find( str );

	if( pD3DResourceMiscFlagInfo )
	{
		*pD3DResourceMiscFlag = pD3DResourceMiscFlagInfo->D3DResourceMiscFlag;
		return true;
	}

	//BUGBUG - elenakr - what to return for other enums ???
	//*pFormat = D3D_FORMAT_UNKNOWN;
	pD3DResourceMiscFlag = NULL;
	return false;
}

//------------------------------------------------------------------------

const D3DResourceMiscFlagInfo CD3DResourceMiscFlagInfoMap::m_D3DResourceMiscFlagInfoTable[] =
{
    { (D3D_RESOURCE_MISC_FLAG) (0), _T( "0" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS), _T( "GENERATE_MIPS" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_SHARED), _T( "GENERATE_MIPS|SHARED" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_TEXTURECUBE), _T( "GENERATE_MIPS|TEXTURECUBE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "GENERATE_MIPS|SHARED_KEYEDMUTEX" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_SHARED|D3D_RESOURCE_MISC_TEXTURECUBE), _T( "GENERATE_MIPS|SHARED|TEXTURECUBE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_SHARED|D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "GENERATE_MIPS|SHARED|SHARED_KEYEDMUTEX" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_SHARED|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|SHARED|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_TEXTURECUBE|D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "GENERATE_MIPS|TEXTURECUBE|SHARED_KEYEDMUTEX" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_TEXTURECUBE|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|TEXTURECUBE|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_SHARED|D3D_RESOURCE_MISC_TEXTURECUBE|D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "GENERATE_MIPS|SHARED|TEXTURECUBE|SHARED_KEYEDMUTEX" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_SHARED|D3D_RESOURCE_MISC_TEXTURECUBE|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|SHARED|TEXTURECUBE|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_SHARED|D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|SHARED|SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_TEXTURECUBE|D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|TEXTURECUBE|SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GENERATE_MIPS|D3D_RESOURCE_MISC_SHARED|D3D_RESOURCE_MISC_TEXTURECUBE|D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|SHARED|TEXTURECUBE|SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_SHARED), _T( "SHARED" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_SHARED|D3D_RESOURCE_MISC_TEXTURECUBE), _T( "SHARED|TEXTURECUBE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_SHARED|D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "SHARED|SHARED_KEYEDMUTEX" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_SHARED|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "SHARED|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_SHARED|D3D_RESOURCE_MISC_TEXTURECUBE|D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "SHARED|TEXTURECUBE|SHARED_KEYEDMUTEX" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_SHARED|D3D_RESOURCE_MISC_TEXTURECUBE|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "SHARED|TEXTURECUBE|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_SHARED|D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "SHARED|SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_SHARED|D3D_RESOURCE_MISC_TEXTURECUBE|D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "SHARED|TEXTURECUBE|SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_TEXTURECUBE), _T( "TEXTURECUBE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_TEXTURECUBE|D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "TEXTURECUBE|SHARED_KEYEDMUTEX" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_TEXTURECUBE|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "TEXTURECUBE|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_TEXTURECUBE|D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "TEXTURECUBE|SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "SHARED_KEYEDMUTEX" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D_RESOURCE_MISC_FLAG) (D3D_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GDI_COMPATIBLE" ) },

};

//------------------------------------------------------------------------

// Instantiate the singleton
CD3DResourceMiscFlagInfoMap CD3DResourceMiscFlagInfoMap::m_Map;

//------------------------------------------------------------------------

// Construct the lookup table.
CD3DResourceMiscFlagInfoMap::CD3DResourceMiscFlagInfoMap()
{
	size_t count = GetD3DResourceMiscFlagInfoTableSize();

	for(size_t i = 0; i < count; i++ )
	{
		m_ByValue.insert( ByValue::value_type( m_D3DResourceMiscFlagInfoTable[i].D3DResourceMiscFlag, &m_D3DResourceMiscFlagInfoTable[i] ) );
		m_ByDesc.insert( ByDesc::value_type( m_D3DResourceMiscFlagInfoTable[i].szName, &m_D3DResourceMiscFlagInfoTable[i] ) );
	}
}

//------------------------------------------------------------------------

const D3DResourceMiscFlagInfo *CD3DResourceMiscFlagInfoMap::Find( D3D_RESOURCE_MISC_FLAG D3DResourceMiscFlag )
{
	ByValue::const_iterator it = m_Map.m_ByValue.find( D3DResourceMiscFlag );
	if( it == m_Map.m_ByValue.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const D3DResourceMiscFlagInfo *CD3DResourceMiscFlagInfoMap::Find( const tstring &Desc )
{
	ByDesc::const_iterator it = m_Map.m_ByDesc.find( Desc );
	if( it == m_Map.m_ByDesc.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const size_t CD3DResourceMiscFlagInfoMap::GetD3DResourceMiscFlagInfoTableSize()
{
	return sizeof(m_D3DResourceMiscFlagInfoTable) / sizeof(m_D3DResourceMiscFlagInfoTable[0]);
}


//////////////////////////////////////////////////////////////////////////
// D3D_MAP_FLAG related definitions
//////////////////////////////////////////////////////////////////////////

tstring WGFTESTAPI ToString( D3D_MAP_FLAG D3DMapFlag )
{
	const D3DMapFlagInfo *pD3DMapFlagInfo = CD3DMapFlagInfoMap::Find( D3DMapFlag );
	
	if( pD3DMapFlagInfo )
		return tstring( pD3DMapFlagInfo->szName );
	else
		return tstring( _T( "(Unknown value)" ) );
}

//------------------------------------------------------------------------

bool WGFTESTAPI FromString( D3D_MAP_FLAG *pD3DMapFlag, const tstring &str )
{
	const D3DMapFlagInfo *pD3DMapFlagInfo = CD3DMapFlagInfoMap::Find( str );

	if( pD3DMapFlagInfo )
	{
		*pD3DMapFlag = pD3DMapFlagInfo->D3DMapFlag;
		return true;
	}

	//BUGBUG - elenakr - what to return for other enums ???
	//*pFormat = D3D_FORMAT_UNKNOWN;
	pD3DMapFlag = NULL;
	return false;
}

//------------------------------------------------------------------------

const D3DMapFlagInfo CD3DMapFlagInfoMap::m_D3DMapFlagInfoTable[] =
{
    { (D3D_MAP_FLAG) (0), _T( "0" ) },
    { (D3D_MAP_FLAG) (D3D_MAP_FLAG_DO_NOT_WAIT), _T( "MAP_FLAG_DO_NOT_WAIT" ) },

};

//------------------------------------------------------------------------

// Instantiate the singleton
CD3DMapFlagInfoMap CD3DMapFlagInfoMap::m_Map;

//------------------------------------------------------------------------

// Construct the lookup table.
CD3DMapFlagInfoMap::CD3DMapFlagInfoMap()
{
	size_t count = GetD3DMapFlagInfoTableSize();

	for(size_t i = 0; i < count; i++ )
	{
		m_ByValue.insert( ByValue::value_type( m_D3DMapFlagInfoTable[i].D3DMapFlag, &m_D3DMapFlagInfoTable[i] ) );
		m_ByDesc.insert( ByDesc::value_type( m_D3DMapFlagInfoTable[i].szName, &m_D3DMapFlagInfoTable[i] ) );
	}
}

//------------------------------------------------------------------------

const D3DMapFlagInfo *CD3DMapFlagInfoMap::Find( D3D_MAP_FLAG D3DMapFlag )
{
	ByValue::const_iterator it = m_Map.m_ByValue.find( D3DMapFlag );
	if( it == m_Map.m_ByValue.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const D3DMapFlagInfo *CD3DMapFlagInfoMap::Find( const tstring &Desc )
{
	ByDesc::const_iterator it = m_Map.m_ByDesc.find( Desc );
	if( it == m_Map.m_ByDesc.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const size_t CD3DMapFlagInfoMap::GetD3DMapFlagInfoTableSize()
{
	return sizeof(m_D3DMapFlagInfoTable) / sizeof(m_D3DMapFlagInfoTable[0]);
}


//////////////////////////////////////////////////////////////////////////
// D3D_RAISE_FLAG related definitions
//////////////////////////////////////////////////////////////////////////

tstring WGFTESTAPI ToString( D3D_RAISE_FLAG D3DRaiseFlag )
{
	const D3DRaiseFlagInfo *pD3DRaiseFlagInfo = CD3DRaiseFlagInfoMap::Find( D3DRaiseFlag );
	
	if( pD3DRaiseFlagInfo )
		return tstring( pD3DRaiseFlagInfo->szName );
	else
		return tstring( _T( "(Unknown value)" ) );
}

//------------------------------------------------------------------------

bool WGFTESTAPI FromString( D3D_RAISE_FLAG *pD3DRaiseFlag, const tstring &str )
{
	const D3DRaiseFlagInfo *pD3DRaiseFlagInfo = CD3DRaiseFlagInfoMap::Find( str );

	if( pD3DRaiseFlagInfo )
	{
		*pD3DRaiseFlag = pD3DRaiseFlagInfo->D3DRaiseFlag;
		return true;
	}

	//BUGBUG - elenakr - what to return for other enums ???
	//*pFormat = D3D_FORMAT_UNKNOWN;
	pD3DRaiseFlag = NULL;
	return false;
}

//------------------------------------------------------------------------

const D3DRaiseFlagInfo CD3DRaiseFlagInfoMap::m_D3DRaiseFlagInfoTable[] =
{
    { (D3D_RAISE_FLAG) (0), _T( "0" ) },
    { (D3D_RAISE_FLAG) (D3D_RAISE_FLAG_DRIVER_INTERNAL_ERROR), _T( "RAISE_FLAG_DRIVER_INTERNAL_ERROR" ) },

};

//------------------------------------------------------------------------

// Instantiate the singleton
CD3DRaiseFlagInfoMap CD3DRaiseFlagInfoMap::m_Map;

//------------------------------------------------------------------------

// Construct the lookup table.
CD3DRaiseFlagInfoMap::CD3DRaiseFlagInfoMap()
{
	size_t count = GetD3DRaiseFlagInfoTableSize();

	for(size_t i = 0; i < count; i++ )
	{
		m_ByValue.insert( ByValue::value_type( m_D3DRaiseFlagInfoTable[i].D3DRaiseFlag, &m_D3DRaiseFlagInfoTable[i] ) );
		m_ByDesc.insert( ByDesc::value_type( m_D3DRaiseFlagInfoTable[i].szName, &m_D3DRaiseFlagInfoTable[i] ) );
	}
}

//------------------------------------------------------------------------

const D3DRaiseFlagInfo *CD3DRaiseFlagInfoMap::Find( D3D_RAISE_FLAG D3DRaiseFlag )
{
	ByValue::const_iterator it = m_Map.m_ByValue.find( D3DRaiseFlag );
	if( it == m_Map.m_ByValue.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const D3DRaiseFlagInfo *CD3DRaiseFlagInfoMap::Find( const tstring &Desc )
{
	ByDesc::const_iterator it = m_Map.m_ByDesc.find( Desc );
	if( it == m_Map.m_ByDesc.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const size_t CD3DRaiseFlagInfoMap::GetD3DRaiseFlagInfoTableSize()
{
	return sizeof(m_D3DRaiseFlagInfoTable) / sizeof(m_D3DRaiseFlagInfoTable[0]);
}


//////////////////////////////////////////////////////////////////////////
// D3D_CLEAR_FLAG related definitions
//////////////////////////////////////////////////////////////////////////

tstring WGFTESTAPI ToString( D3D_CLEAR_FLAG D3DClearFlag )
{
	const D3DClearFlagInfo *pD3DClearFlagInfo = CD3DClearFlagInfoMap::Find( D3DClearFlag );
	
	if( pD3DClearFlagInfo )
		return tstring( pD3DClearFlagInfo->szName );
	else
		return tstring( _T( "(Unknown value)" ) );
}

//------------------------------------------------------------------------

bool WGFTESTAPI FromString( D3D_CLEAR_FLAG *pD3DClearFlag, const tstring &str )
{
	const D3DClearFlagInfo *pD3DClearFlagInfo = CD3DClearFlagInfoMap::Find( str );

	if( pD3DClearFlagInfo )
	{
		*pD3DClearFlag = pD3DClearFlagInfo->D3DClearFlag;
		return true;
	}

	//BUGBUG - elenakr - what to return for other enums ???
	//*pFormat = D3D_FORMAT_UNKNOWN;
	pD3DClearFlag = NULL;
	return false;
}

//------------------------------------------------------------------------

const D3DClearFlagInfo CD3DClearFlagInfoMap::m_D3DClearFlagInfoTable[] =
{
    { (D3D_CLEAR_FLAG) (0), _T( "0" ) },
    { (D3D_CLEAR_FLAG) (D3D_CLEAR_DEPTH), _T( "DEPTH" ) },
    { (D3D_CLEAR_FLAG) (D3D_CLEAR_DEPTH|D3D_CLEAR_STENCIL), _T( "DEPTH|STENCIL" ) },
    { (D3D_CLEAR_FLAG) (D3D_CLEAR_STENCIL), _T( "STENCIL" ) },

};

//------------------------------------------------------------------------

// Instantiate the singleton
CD3DClearFlagInfoMap CD3DClearFlagInfoMap::m_Map;

//------------------------------------------------------------------------

// Construct the lookup table.
CD3DClearFlagInfoMap::CD3DClearFlagInfoMap()
{
	size_t count = GetD3DClearFlagInfoTableSize();

	for(size_t i = 0; i < count; i++ )
	{
		m_ByValue.insert( ByValue::value_type( m_D3DClearFlagInfoTable[i].D3DClearFlag, &m_D3DClearFlagInfoTable[i] ) );
		m_ByDesc.insert( ByDesc::value_type( m_D3DClearFlagInfoTable[i].szName, &m_D3DClearFlagInfoTable[i] ) );
	}
}

//------------------------------------------------------------------------

const D3DClearFlagInfo *CD3DClearFlagInfoMap::Find( D3D_CLEAR_FLAG D3DClearFlag )
{
	ByValue::const_iterator it = m_Map.m_ByValue.find( D3DClearFlag );
	if( it == m_Map.m_ByValue.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const D3DClearFlagInfo *CD3DClearFlagInfoMap::Find( const tstring &Desc )
{
	ByDesc::const_iterator it = m_Map.m_ByDesc.find( Desc );
	if( it == m_Map.m_ByDesc.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const size_t CD3DClearFlagInfoMap::GetD3DClearFlagInfoTableSize()
{
	return sizeof(m_D3DClearFlagInfoTable) / sizeof(m_D3DClearFlagInfoTable[0]);
}


