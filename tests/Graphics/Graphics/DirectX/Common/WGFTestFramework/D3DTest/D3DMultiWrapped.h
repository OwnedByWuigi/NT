//*****************************************************************************
//***                        THIS FILE IS GENERATED                        ****
//***                       DO NOT MODIFY THIS FILE !!!                    ****
//*****************************************************************************
//*****************************************************************************
//* File: D3DMultiWrapped.h
//* 
//* Description: 
//*     Multi-Interface D3D wrapper container class declarations.
//*
//*****************************************************************************

// Ignore Prefast warnings 26060 (Range Precondition violation) and 28930 (Unused assignment of pointer variable)
#pragma warning( disable: 26060 )
#pragma warning( disable: 28930 )

#pragma once
#include "D3DWrappedTypes.h"
#include "D3DWrapped.h"


////////////////////////////////////////////////////////////
//
// Wrapper classes
//
////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////
//
// CMultiDeviceChild
//
////////////////////////////////////////////////////////////

class CMultiDeviceChild : public CDeviceChild
{
public:
};


////////////////////////////////////////////////////////////
//
// CMultiDepthStencilState
//
////////////////////////////////////////////////////////////

class CMultiDepthStencilState : public CMultiDeviceChild, public CDepthStencilState
{
    CDepthStencilState **m_pDepthStencilStatePtrArray;
    int m_nDepthStencilStateCount;

public:
    CMultiDepthStencilState( int nCount );
    CMultiDepthStencilState( CDepthStencilState **pDepthStencilStatePtrArray, int nCount );
    ~CMultiDepthStencilState();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nDepthStencilStateCount; }
    void SetSubDepthStencilState( int index, CDepthStencilState *pDepthStencilState );
    virtual CDepthStencilState *Src() { return GetSubDepthStencilState( 0 ); }
    virtual CDepthStencilState *Ref() { return GetSubDepthStencilState( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pDepthStencilStatePtrArray[0]->GetIUnknown(); }

    //
    // CDepthStencilState Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DepthStencilState **pInterface ) { m_pDepthStencilStatePtrArray[0]->GetInterfacePtr( (ID3D10DepthStencilState **) pInterface ); }
    void GetInterfacePtr( ID3D11DepthStencilState **pInterface ) { m_pDepthStencilStatePtrArray[0]->GetInterfacePtr( (ID3D11DepthStencilState **) pInterface ); }
    CDepthStencilState *GetSubDepthStencilState( int index ) { return m_pDepthStencilStatePtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_DEPTH_STENCIL_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pDepthStencilStatePtrArray[0]->GetInterfacePtr( (ID3D10DepthStencilState **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pDepthStencilStatePtrArray[0]->GetInterfacePtr( (ID3D11DepthStencilState **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pDepthStencilStatePtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiBlendState
//
////////////////////////////////////////////////////////////

class CMultiBlendState : public CMultiDeviceChild, public CBlendState
{
    CBlendState **m_pBlendStatePtrArray;
    int m_nBlendStateCount;

public:
    CMultiBlendState( int nCount );
    CMultiBlendState( CBlendState **pBlendStatePtrArray, int nCount );
    ~CMultiBlendState();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nBlendStateCount; }
    void SetSubBlendState( int index, CBlendState *pBlendState );
    virtual CBlendState *Src() { return GetSubBlendState( 0 ); }
    virtual CBlendState *Ref() { return GetSubBlendState( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pBlendStatePtrArray[0]->GetIUnknown(); }

    //
    // CBlendState Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10BlendState **pInterface ) { m_pBlendStatePtrArray[0]->GetInterfacePtr( (ID3D10BlendState **) pInterface ); }
    void GetInterfacePtr( ID3D11BlendState **pInterface ) { m_pBlendStatePtrArray[0]->GetInterfacePtr( (ID3D11BlendState **) pInterface ); }
    CBlendState *GetSubBlendState( int index ) { return m_pBlendStatePtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_BLEND_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pBlendStatePtrArray[0]->GetInterfacePtr( (ID3D10BlendState **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pBlendStatePtrArray[0]->GetInterfacePtr( (ID3D11BlendState **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pBlendStatePtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiRasterizerState
//
////////////////////////////////////////////////////////////

class CMultiRasterizerState : public CMultiDeviceChild, public CRasterizerState
{
    CRasterizerState **m_pRasterizerStatePtrArray;
    int m_nRasterizerStateCount;

public:
    CMultiRasterizerState( int nCount );
    CMultiRasterizerState( CRasterizerState **pRasterizerStatePtrArray, int nCount );
    ~CMultiRasterizerState();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nRasterizerStateCount; }
    void SetSubRasterizerState( int index, CRasterizerState *pRasterizerState );
    virtual CRasterizerState *Src() { return GetSubRasterizerState( 0 ); }
    virtual CRasterizerState *Ref() { return GetSubRasterizerState( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pRasterizerStatePtrArray[0]->GetIUnknown(); }

    //
    // CRasterizerState Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10RasterizerState **pInterface ) { m_pRasterizerStatePtrArray[0]->GetInterfacePtr( (ID3D10RasterizerState **) pInterface ); }
    void GetInterfacePtr( ID3D11RasterizerState **pInterface ) { m_pRasterizerStatePtrArray[0]->GetInterfacePtr( (ID3D11RasterizerState **) pInterface ); }
    CRasterizerState *GetSubRasterizerState( int index ) { return m_pRasterizerStatePtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_RASTERIZER_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pRasterizerStatePtrArray[0]->GetInterfacePtr( (ID3D10RasterizerState **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pRasterizerStatePtrArray[0]->GetInterfacePtr( (ID3D11RasterizerState **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pRasterizerStatePtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiResource
//
////////////////////////////////////////////////////////////

class CMultiResource : public CMultiDeviceChild, public CResource
{
public:
};


////////////////////////////////////////////////////////////
//
// CMultiBuffer
//
////////////////////////////////////////////////////////////

class CMultiBuffer : public CMultiResource, public CBuffer
{
    CBuffer **m_pBufferPtrArray;
    int m_nBufferCount;

public:
    CMultiBuffer( int nCount );
    CMultiBuffer( CBuffer **pBufferPtrArray, int nCount );
    ~CMultiBuffer();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nBufferCount; }
    void SetSubBuffer( int index, CBuffer *pBuffer );
    virtual CBuffer *Src() { return GetSubBuffer( 0 ); }
    virtual CBuffer *Ref() { return GetSubBuffer( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pBufferPtrArray[0]->GetIUnknown(); }

    //
    // CBuffer Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Buffer **pInterface ) { m_pBufferPtrArray[0]->GetInterfacePtr( (ID3D10Buffer **) pInterface ); }
    void GetInterfacePtr( ID3D11Buffer **pInterface ) { m_pBufferPtrArray[0]->GetInterfacePtr( (ID3D11Buffer **) pInterface ); }
    CBuffer *GetSubBuffer( int index ) { return m_pBufferPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // Map
    ////////////////////////////////////////////////////////////
    NRESULT Map(  D3D_MAP MapType, UINT MapFlags, void ** ppData );

    ////////////////////////////////////////////////////////////
    // Unmap
    ////////////////////////////////////////////////////////////
    void Unmap(  );

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_BUFFER_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CResource Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Resource **pInterface ) { m_pBufferPtrArray[0]->GetInterfacePtr( (ID3D10Buffer **) pInterface ); }
    void GetInterfacePtr( ID3D11Resource **pInterface ) { m_pBufferPtrArray[0]->GetInterfacePtr( (ID3D11Buffer **) pInterface ); }
    CResource *GetSubResource( int index ) { return m_pBufferPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetType
    ////////////////////////////////////////////////////////////
    void GetType(  D3D_RESOURCE_DIMENSION * rType );

    ////////////////////////////////////////////////////////////
    // SetEvictionPriority
    ////////////////////////////////////////////////////////////
    void SetEvictionPriority(  UINT EvictionPriority );

    ////////////////////////////////////////////////////////////
    // GetEvictionPriority
    ////////////////////////////////////////////////////////////
    UINT GetEvictionPriority(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pBufferPtrArray[0]->GetInterfacePtr( (ID3D10Buffer **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pBufferPtrArray[0]->GetInterfacePtr( (ID3D11Buffer **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pBufferPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiTexture1D
//
////////////////////////////////////////////////////////////

class CMultiTexture1D : public CMultiResource, public CTexture1D
{
    CTexture1D **m_pTexture1DPtrArray;
    int m_nTexture1DCount;

public:
    CMultiTexture1D( int nCount );
    CMultiTexture1D( CTexture1D **pTexture1DPtrArray, int nCount );
    ~CMultiTexture1D();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nTexture1DCount; }
    void SetSubTexture1D( int index, CTexture1D *pTexture1D );
    virtual CTexture1D *Src() { return GetSubTexture1D( 0 ); }
    virtual CTexture1D *Ref() { return GetSubTexture1D( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pTexture1DPtrArray[0]->GetIUnknown(); }

    //
    // CTexture1D Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Texture1D **pInterface ) { m_pTexture1DPtrArray[0]->GetInterfacePtr( (ID3D10Texture1D **) pInterface ); }
    void GetInterfacePtr( ID3D11Texture1D **pInterface ) { m_pTexture1DPtrArray[0]->GetInterfacePtr( (ID3D11Texture1D **) pInterface ); }
    CTexture1D *GetSubTexture1D( int index ) { return m_pTexture1DPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // Map
    ////////////////////////////////////////////////////////////
    NRESULT Map(  UINT Subresource, D3D_MAP MapType, UINT MapFlags, void ** ppData );

    ////////////////////////////////////////////////////////////
    // Unmap
    ////////////////////////////////////////////////////////////
    void Unmap(  UINT Subresource );

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_TEXTURE1D_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CResource Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Resource **pInterface ) { m_pTexture1DPtrArray[0]->GetInterfacePtr( (ID3D10Texture1D **) pInterface ); }
    void GetInterfacePtr( ID3D11Resource **pInterface ) { m_pTexture1DPtrArray[0]->GetInterfacePtr( (ID3D11Texture1D **) pInterface ); }
    CResource *GetSubResource( int index ) { return m_pTexture1DPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetType
    ////////////////////////////////////////////////////////////
    void GetType(  D3D_RESOURCE_DIMENSION * rType );

    ////////////////////////////////////////////////////////////
    // SetEvictionPriority
    ////////////////////////////////////////////////////////////
    void SetEvictionPriority(  UINT EvictionPriority );

    ////////////////////////////////////////////////////////////
    // GetEvictionPriority
    ////////////////////////////////////////////////////////////
    UINT GetEvictionPriority(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pTexture1DPtrArray[0]->GetInterfacePtr( (ID3D10Texture1D **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pTexture1DPtrArray[0]->GetInterfacePtr( (ID3D11Texture1D **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pTexture1DPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiTexture2D
//
////////////////////////////////////////////////////////////

class CMultiTexture2D : public CMultiResource, public CTexture2D
{
    CTexture2D **m_pTexture2DPtrArray;
    int m_nTexture2DCount;

public:
    CMultiTexture2D( int nCount );
    CMultiTexture2D( CTexture2D **pTexture2DPtrArray, int nCount );
    ~CMultiTexture2D();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nTexture2DCount; }
    void SetSubTexture2D( int index, CTexture2D *pTexture2D );
    virtual CTexture2D *Src() { return GetSubTexture2D( 0 ); }
    virtual CTexture2D *Ref() { return GetSubTexture2D( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pTexture2DPtrArray[0]->GetIUnknown(); }

    //
    // CTexture2D Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Texture2D **pInterface ) { m_pTexture2DPtrArray[0]->GetInterfacePtr( (ID3D10Texture2D **) pInterface ); }
    void GetInterfacePtr( ID3D11Texture2D **pInterface ) { m_pTexture2DPtrArray[0]->GetInterfacePtr( (ID3D11Texture2D **) pInterface ); }
    CTexture2D *GetSubTexture2D( int index ) { return m_pTexture2DPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // Map
    ////////////////////////////////////////////////////////////
    NRESULT Map(  UINT Subresource, D3D_MAP MapType, UINT MapFlags, D3D_MAPPED_TEXTURE2D * pMappedTex2D );

    ////////////////////////////////////////////////////////////
    // Unmap
    ////////////////////////////////////////////////////////////
    void Unmap(  UINT Subresource );

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_TEXTURE2D_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CResource Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Resource **pInterface ) { m_pTexture2DPtrArray[0]->GetInterfacePtr( (ID3D10Texture2D **) pInterface ); }
    void GetInterfacePtr( ID3D11Resource **pInterface ) { m_pTexture2DPtrArray[0]->GetInterfacePtr( (ID3D11Texture2D **) pInterface ); }
    CResource *GetSubResource( int index ) { return m_pTexture2DPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetType
    ////////////////////////////////////////////////////////////
    void GetType(  D3D_RESOURCE_DIMENSION * rType );

    ////////////////////////////////////////////////////////////
    // SetEvictionPriority
    ////////////////////////////////////////////////////////////
    void SetEvictionPriority(  UINT EvictionPriority );

    ////////////////////////////////////////////////////////////
    // GetEvictionPriority
    ////////////////////////////////////////////////////////////
    UINT GetEvictionPriority(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pTexture2DPtrArray[0]->GetInterfacePtr( (ID3D10Texture2D **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pTexture2DPtrArray[0]->GetInterfacePtr( (ID3D11Texture2D **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pTexture2DPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiTexture3D
//
////////////////////////////////////////////////////////////

class CMultiTexture3D : public CMultiResource, public CTexture3D
{
    CTexture3D **m_pTexture3DPtrArray;
    int m_nTexture3DCount;

public:
    CMultiTexture3D( int nCount );
    CMultiTexture3D( CTexture3D **pTexture3DPtrArray, int nCount );
    ~CMultiTexture3D();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nTexture3DCount; }
    void SetSubTexture3D( int index, CTexture3D *pTexture3D );
    virtual CTexture3D *Src() { return GetSubTexture3D( 0 ); }
    virtual CTexture3D *Ref() { return GetSubTexture3D( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pTexture3DPtrArray[0]->GetIUnknown(); }

    //
    // CTexture3D Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Texture3D **pInterface ) { m_pTexture3DPtrArray[0]->GetInterfacePtr( (ID3D10Texture3D **) pInterface ); }
    void GetInterfacePtr( ID3D11Texture3D **pInterface ) { m_pTexture3DPtrArray[0]->GetInterfacePtr( (ID3D11Texture3D **) pInterface ); }
    CTexture3D *GetSubTexture3D( int index ) { return m_pTexture3DPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // Map
    ////////////////////////////////////////////////////////////
    NRESULT Map(  UINT Subresource, D3D_MAP MapType, UINT MapFlags, D3D_MAPPED_TEXTURE3D * pMappedTex3D );

    ////////////////////////////////////////////////////////////
    // Unmap
    ////////////////////////////////////////////////////////////
    void Unmap(  UINT Subresource );

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_TEXTURE3D_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CResource Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Resource **pInterface ) { m_pTexture3DPtrArray[0]->GetInterfacePtr( (ID3D10Texture3D **) pInterface ); }
    void GetInterfacePtr( ID3D11Resource **pInterface ) { m_pTexture3DPtrArray[0]->GetInterfacePtr( (ID3D11Texture3D **) pInterface ); }
    CResource *GetSubResource( int index ) { return m_pTexture3DPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetType
    ////////////////////////////////////////////////////////////
    void GetType(  D3D_RESOURCE_DIMENSION * rType );

    ////////////////////////////////////////////////////////////
    // SetEvictionPriority
    ////////////////////////////////////////////////////////////
    void SetEvictionPriority(  UINT EvictionPriority );

    ////////////////////////////////////////////////////////////
    // GetEvictionPriority
    ////////////////////////////////////////////////////////////
    UINT GetEvictionPriority(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pTexture3DPtrArray[0]->GetInterfacePtr( (ID3D10Texture3D **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pTexture3DPtrArray[0]->GetInterfacePtr( (ID3D11Texture3D **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pTexture3DPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiView
//
////////////////////////////////////////////////////////////

class CMultiView : public CMultiDeviceChild, public CView
{
public:
};


////////////////////////////////////////////////////////////
//
// CMultiShaderResourceView
//
////////////////////////////////////////////////////////////

class CMultiShaderResourceView : public CMultiView, public CShaderResourceView
{
    CShaderResourceView **m_pShaderResourceViewPtrArray;
    int m_nShaderResourceViewCount;

public:
    CMultiShaderResourceView( int nCount );
    CMultiShaderResourceView( CShaderResourceView **pShaderResourceViewPtrArray, int nCount );
    ~CMultiShaderResourceView();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nShaderResourceViewCount; }
    void SetSubShaderResourceView( int index, CShaderResourceView *pShaderResourceView );
    virtual CShaderResourceView *Src() { return GetSubShaderResourceView( 0 ); }
    virtual CShaderResourceView *Ref() { return GetSubShaderResourceView( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pShaderResourceViewPtrArray[0]->GetIUnknown(); }

    //
    // CShaderResourceView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10ShaderResourceView **pInterface ) { m_pShaderResourceViewPtrArray[0]->GetInterfacePtr( (ID3D10ShaderResourceView **) pInterface ); }
    void GetInterfacePtr( ID3D11ShaderResourceView **pInterface ) { m_pShaderResourceViewPtrArray[0]->GetInterfacePtr( (ID3D11ShaderResourceView **) pInterface ); }
    CShaderResourceView *GetSubShaderResourceView( int index ) { return m_pShaderResourceViewPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_SHADER_RESOURCE_VIEW_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10View **pInterface ) { m_pShaderResourceViewPtrArray[0]->GetInterfacePtr( (ID3D10ShaderResourceView **) pInterface ); }
    void GetInterfacePtr( ID3D11View **pInterface ) { m_pShaderResourceViewPtrArray[0]->GetInterfacePtr( (ID3D11ShaderResourceView **) pInterface ); }
    CView *GetSubView( int index ) { return m_pShaderResourceViewPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetResource
    ////////////////////////////////////////////////////////////
    void GetResource(  CResource ** ppResource );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pShaderResourceViewPtrArray[0]->GetInterfacePtr( (ID3D10ShaderResourceView **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pShaderResourceViewPtrArray[0]->GetInterfacePtr( (ID3D11ShaderResourceView **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pShaderResourceViewPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiRenderTargetView
//
////////////////////////////////////////////////////////////

class CMultiRenderTargetView : public CMultiView, public CRenderTargetView
{
    CRenderTargetView **m_pRenderTargetViewPtrArray;
    int m_nRenderTargetViewCount;

public:
    CMultiRenderTargetView( int nCount );
    CMultiRenderTargetView( CRenderTargetView **pRenderTargetViewPtrArray, int nCount );
    ~CMultiRenderTargetView();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nRenderTargetViewCount; }
    void SetSubRenderTargetView( int index, CRenderTargetView *pRenderTargetView );
    virtual CRenderTargetView *Src() { return GetSubRenderTargetView( 0 ); }
    virtual CRenderTargetView *Ref() { return GetSubRenderTargetView( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pRenderTargetViewPtrArray[0]->GetIUnknown(); }

    //
    // CRenderTargetView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10RenderTargetView **pInterface ) { m_pRenderTargetViewPtrArray[0]->GetInterfacePtr( (ID3D10RenderTargetView **) pInterface ); }
    void GetInterfacePtr( ID3D11RenderTargetView **pInterface ) { m_pRenderTargetViewPtrArray[0]->GetInterfacePtr( (ID3D11RenderTargetView **) pInterface ); }
    CRenderTargetView *GetSubRenderTargetView( int index ) { return m_pRenderTargetViewPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_RENDER_TARGET_VIEW_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10View **pInterface ) { m_pRenderTargetViewPtrArray[0]->GetInterfacePtr( (ID3D10RenderTargetView **) pInterface ); }
    void GetInterfacePtr( ID3D11View **pInterface ) { m_pRenderTargetViewPtrArray[0]->GetInterfacePtr( (ID3D11RenderTargetView **) pInterface ); }
    CView *GetSubView( int index ) { return m_pRenderTargetViewPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetResource
    ////////////////////////////////////////////////////////////
    void GetResource(  CResource ** ppResource );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pRenderTargetViewPtrArray[0]->GetInterfacePtr( (ID3D10RenderTargetView **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pRenderTargetViewPtrArray[0]->GetInterfacePtr( (ID3D11RenderTargetView **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pRenderTargetViewPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiDepthStencilView
//
////////////////////////////////////////////////////////////

class CMultiDepthStencilView : public CMultiView, public CDepthStencilView
{
    CDepthStencilView **m_pDepthStencilViewPtrArray;
    int m_nDepthStencilViewCount;

public:
    CMultiDepthStencilView( int nCount );
    CMultiDepthStencilView( CDepthStencilView **pDepthStencilViewPtrArray, int nCount );
    ~CMultiDepthStencilView();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nDepthStencilViewCount; }
    void SetSubDepthStencilView( int index, CDepthStencilView *pDepthStencilView );
    virtual CDepthStencilView *Src() { return GetSubDepthStencilView( 0 ); }
    virtual CDepthStencilView *Ref() { return GetSubDepthStencilView( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pDepthStencilViewPtrArray[0]->GetIUnknown(); }

    //
    // CDepthStencilView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DepthStencilView **pInterface ) { m_pDepthStencilViewPtrArray[0]->GetInterfacePtr( (ID3D10DepthStencilView **) pInterface ); }
    void GetInterfacePtr( ID3D11DepthStencilView **pInterface ) { m_pDepthStencilViewPtrArray[0]->GetInterfacePtr( (ID3D11DepthStencilView **) pInterface ); }
    CDepthStencilView *GetSubDepthStencilView( int index ) { return m_pDepthStencilViewPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_DEPTH_STENCIL_VIEW_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10View **pInterface ) { m_pDepthStencilViewPtrArray[0]->GetInterfacePtr( (ID3D10DepthStencilView **) pInterface ); }
    void GetInterfacePtr( ID3D11View **pInterface ) { m_pDepthStencilViewPtrArray[0]->GetInterfacePtr( (ID3D11DepthStencilView **) pInterface ); }
    CView *GetSubView( int index ) { return m_pDepthStencilViewPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetResource
    ////////////////////////////////////////////////////////////
    void GetResource(  CResource ** ppResource );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pDepthStencilViewPtrArray[0]->GetInterfacePtr( (ID3D10DepthStencilView **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pDepthStencilViewPtrArray[0]->GetInterfacePtr( (ID3D11DepthStencilView **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pDepthStencilViewPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiVertexShader
//
////////////////////////////////////////////////////////////

class CMultiVertexShader : public CMultiDeviceChild, public CVertexShader
{
    CVertexShader **m_pVertexShaderPtrArray;
    int m_nVertexShaderCount;

public:
    CMultiVertexShader( int nCount );
    CMultiVertexShader( CVertexShader **pVertexShaderPtrArray, int nCount );
    ~CMultiVertexShader();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nVertexShaderCount; }
    void SetSubVertexShader( int index, CVertexShader *pVertexShader );
    virtual CVertexShader *Src() { return GetSubVertexShader( 0 ); }
    virtual CVertexShader *Ref() { return GetSubVertexShader( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pVertexShaderPtrArray[0]->GetIUnknown(); }

    //
    // CVertexShader Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10VertexShader **pInterface ) { m_pVertexShaderPtrArray[0]->GetInterfacePtr( (ID3D10VertexShader **) pInterface ); }
    void GetInterfacePtr( ID3D11VertexShader **pInterface ) { m_pVertexShaderPtrArray[0]->GetInterfacePtr( (ID3D11VertexShader **) pInterface ); }
    CVertexShader *GetSubVertexShader( int index ) { return m_pVertexShaderPtrArray[index]; }


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pVertexShaderPtrArray[0]->GetInterfacePtr( (ID3D10VertexShader **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pVertexShaderPtrArray[0]->GetInterfacePtr( (ID3D11VertexShader **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pVertexShaderPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiGeometryShader
//
////////////////////////////////////////////////////////////

class CMultiGeometryShader : public CMultiDeviceChild, public CGeometryShader
{
    CGeometryShader **m_pGeometryShaderPtrArray;
    int m_nGeometryShaderCount;

public:
    CMultiGeometryShader( int nCount );
    CMultiGeometryShader( CGeometryShader **pGeometryShaderPtrArray, int nCount );
    ~CMultiGeometryShader();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nGeometryShaderCount; }
    void SetSubGeometryShader( int index, CGeometryShader *pGeometryShader );
    virtual CGeometryShader *Src() { return GetSubGeometryShader( 0 ); }
    virtual CGeometryShader *Ref() { return GetSubGeometryShader( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pGeometryShaderPtrArray[0]->GetIUnknown(); }

    //
    // CGeometryShader Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10GeometryShader **pInterface ) { m_pGeometryShaderPtrArray[0]->GetInterfacePtr( (ID3D10GeometryShader **) pInterface ); }
    void GetInterfacePtr( ID3D11GeometryShader **pInterface ) { m_pGeometryShaderPtrArray[0]->GetInterfacePtr( (ID3D11GeometryShader **) pInterface ); }
    CGeometryShader *GetSubGeometryShader( int index ) { return m_pGeometryShaderPtrArray[index]; }


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pGeometryShaderPtrArray[0]->GetInterfacePtr( (ID3D10GeometryShader **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pGeometryShaderPtrArray[0]->GetInterfacePtr( (ID3D11GeometryShader **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pGeometryShaderPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiPixelShader
//
////////////////////////////////////////////////////////////

class CMultiPixelShader : public CMultiDeviceChild, public CPixelShader
{
    CPixelShader **m_pPixelShaderPtrArray;
    int m_nPixelShaderCount;

public:
    CMultiPixelShader( int nCount );
    CMultiPixelShader( CPixelShader **pPixelShaderPtrArray, int nCount );
    ~CMultiPixelShader();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nPixelShaderCount; }
    void SetSubPixelShader( int index, CPixelShader *pPixelShader );
    virtual CPixelShader *Src() { return GetSubPixelShader( 0 ); }
    virtual CPixelShader *Ref() { return GetSubPixelShader( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pPixelShaderPtrArray[0]->GetIUnknown(); }

    //
    // CPixelShader Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10PixelShader **pInterface ) { m_pPixelShaderPtrArray[0]->GetInterfacePtr( (ID3D10PixelShader **) pInterface ); }
    void GetInterfacePtr( ID3D11PixelShader **pInterface ) { m_pPixelShaderPtrArray[0]->GetInterfacePtr( (ID3D11PixelShader **) pInterface ); }
    CPixelShader *GetSubPixelShader( int index ) { return m_pPixelShaderPtrArray[index]; }


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pPixelShaderPtrArray[0]->GetInterfacePtr( (ID3D10PixelShader **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pPixelShaderPtrArray[0]->GetInterfacePtr( (ID3D11PixelShader **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pPixelShaderPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiInputLayout
//
////////////////////////////////////////////////////////////

class CMultiInputLayout : public CMultiDeviceChild, public CInputLayout
{
    CInputLayout **m_pInputLayoutPtrArray;
    int m_nInputLayoutCount;

public:
    CMultiInputLayout( int nCount );
    CMultiInputLayout( CInputLayout **pInputLayoutPtrArray, int nCount );
    ~CMultiInputLayout();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nInputLayoutCount; }
    void SetSubInputLayout( int index, CInputLayout *pInputLayout );
    virtual CInputLayout *Src() { return GetSubInputLayout( 0 ); }
    virtual CInputLayout *Ref() { return GetSubInputLayout( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pInputLayoutPtrArray[0]->GetIUnknown(); }

    //
    // CInputLayout Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10InputLayout **pInterface ) { m_pInputLayoutPtrArray[0]->GetInterfacePtr( (ID3D10InputLayout **) pInterface ); }
    void GetInterfacePtr( ID3D11InputLayout **pInterface ) { m_pInputLayoutPtrArray[0]->GetInterfacePtr( (ID3D11InputLayout **) pInterface ); }
    CInputLayout *GetSubInputLayout( int index ) { return m_pInputLayoutPtrArray[index]; }


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pInputLayoutPtrArray[0]->GetInterfacePtr( (ID3D10InputLayout **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pInputLayoutPtrArray[0]->GetInterfacePtr( (ID3D11InputLayout **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pInputLayoutPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiSamplerState
//
////////////////////////////////////////////////////////////

class CMultiSamplerState : public CMultiDeviceChild, public CSamplerState
{
    CSamplerState **m_pSamplerStatePtrArray;
    int m_nSamplerStateCount;

public:
    CMultiSamplerState( int nCount );
    CMultiSamplerState( CSamplerState **pSamplerStatePtrArray, int nCount );
    ~CMultiSamplerState();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nSamplerStateCount; }
    void SetSubSamplerState( int index, CSamplerState *pSamplerState );
    virtual CSamplerState *Src() { return GetSubSamplerState( 0 ); }
    virtual CSamplerState *Ref() { return GetSubSamplerState( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pSamplerStatePtrArray[0]->GetIUnknown(); }

    //
    // CSamplerState Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10SamplerState **pInterface ) { m_pSamplerStatePtrArray[0]->GetInterfacePtr( (ID3D10SamplerState **) pInterface ); }
    void GetInterfacePtr( ID3D11SamplerState **pInterface ) { m_pSamplerStatePtrArray[0]->GetInterfacePtr( (ID3D11SamplerState **) pInterface ); }
    CSamplerState *GetSubSamplerState( int index ) { return m_pSamplerStatePtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_SAMPLER_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pSamplerStatePtrArray[0]->GetInterfacePtr( (ID3D10SamplerState **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pSamplerStatePtrArray[0]->GetInterfacePtr( (ID3D11SamplerState **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pSamplerStatePtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiAsynchronous
//
////////////////////////////////////////////////////////////

class CMultiAsynchronous : public CMultiDeviceChild, public CAsynchronous
{
public:
};


////////////////////////////////////////////////////////////
//
// CMultiQuery
//
////////////////////////////////////////////////////////////

class CMultiQuery : public CMultiAsynchronous, public CQuery
{
public:
};


////////////////////////////////////////////////////////////
//
// CMultiPredicate
//
////////////////////////////////////////////////////////////

class CMultiPredicate : public CMultiQuery, public CPredicate
{
    CPredicate **m_pPredicatePtrArray;
    int m_nPredicateCount;

public:
    CMultiPredicate( int nCount );
    CMultiPredicate( CPredicate **pPredicatePtrArray, int nCount );
    ~CMultiPredicate();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nPredicateCount; }
    void SetSubPredicate( int index, CPredicate *pPredicate );
    virtual CPredicate *Src() { return GetSubPredicate( 0 ); }
    virtual CPredicate *Ref() { return GetSubPredicate( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pPredicatePtrArray[0]->GetIUnknown(); }

    //
    // CPredicate Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Predicate **pInterface ) { m_pPredicatePtrArray[0]->GetInterfacePtr( (ID3D10Predicate **) pInterface ); }
    void GetInterfacePtr( ID3D11Predicate **pInterface ) { m_pPredicatePtrArray[0]->GetInterfacePtr( (ID3D11Predicate **) pInterface ); }
    CPredicate *GetSubPredicate( int index ) { return m_pPredicatePtrArray[index]; }


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CQuery Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Query **pInterface ) { m_pPredicatePtrArray[0]->GetInterfacePtr( (ID3D10Predicate **) pInterface ); }
    void GetInterfacePtr( ID3D11Query **pInterface ) { m_pPredicatePtrArray[0]->GetInterfacePtr( (ID3D11Predicate **) pInterface ); }
    CQuery *GetSubQuery( int index ) { return m_pPredicatePtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_QUERY_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CAsynchronous Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Asynchronous **pInterface ) { m_pPredicatePtrArray[0]->GetInterfacePtr( (ID3D10Predicate **) pInterface ); }
    void GetInterfacePtr( ID3D11Asynchronous **pInterface ) { m_pPredicatePtrArray[0]->GetInterfacePtr( (ID3D11Predicate **) pInterface ); }
    CAsynchronous *GetSubAsynchronous( int index ) { return m_pPredicatePtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // Begin
    ////////////////////////////////////////////////////////////
    void Begin(  );

    ////////////////////////////////////////////////////////////
    // End
    ////////////////////////////////////////////////////////////
    void End(  );

    ////////////////////////////////////////////////////////////
    // GetData
    ////////////////////////////////////////////////////////////
    NRESULT GetData(  void * pData, UINT DataSize, UINT GetDataFlags );

    ////////////////////////////////////////////////////////////
    // GetDataSize
    ////////////////////////////////////////////////////////////
    UINT GetDataSize(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pPredicatePtrArray[0]->GetInterfacePtr( (ID3D10Predicate **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pPredicatePtrArray[0]->GetInterfacePtr( (ID3D11Predicate **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pPredicatePtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiCounter
//
////////////////////////////////////////////////////////////

class CMultiCounter : public CMultiAsynchronous, public CCounter
{
    CCounter **m_pCounterPtrArray;
    int m_nCounterCount;

public:
    CMultiCounter( int nCount );
    CMultiCounter( CCounter **pCounterPtrArray, int nCount );
    ~CMultiCounter();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nCounterCount; }
    void SetSubCounter( int index, CCounter *pCounter );
    virtual CCounter *Src() { return GetSubCounter( 0 ); }
    virtual CCounter *Ref() { return GetSubCounter( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pCounterPtrArray[0]->GetIUnknown(); }

    //
    // CCounter Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Counter **pInterface ) { m_pCounterPtrArray[0]->GetInterfacePtr( (ID3D10Counter **) pInterface ); }
    void GetInterfacePtr( ID3D11Counter **pInterface ) { m_pCounterPtrArray[0]->GetInterfacePtr( (ID3D11Counter **) pInterface ); }
    CCounter *GetSubCounter( int index ) { return m_pCounterPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_COUNTER_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CAsynchronous Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Asynchronous **pInterface ) { m_pCounterPtrArray[0]->GetInterfacePtr( (ID3D10Counter **) pInterface ); }
    void GetInterfacePtr( ID3D11Asynchronous **pInterface ) { m_pCounterPtrArray[0]->GetInterfacePtr( (ID3D11Counter **) pInterface ); }
    CAsynchronous *GetSubAsynchronous( int index ) { return m_pCounterPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // Begin
    ////////////////////////////////////////////////////////////
    void Begin(  );

    ////////////////////////////////////////////////////////////
    // End
    ////////////////////////////////////////////////////////////
    void End(  );

    ////////////////////////////////////////////////////////////
    // GetData
    ////////////////////////////////////////////////////////////
    NRESULT GetData(  void * pData, UINT DataSize, UINT GetDataFlags );

    ////////////////////////////////////////////////////////////
    // GetDataSize
    ////////////////////////////////////////////////////////////
    UINT GetDataSize(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pCounterPtrArray[0]->GetInterfacePtr( (ID3D10Counter **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pCounterPtrArray[0]->GetInterfacePtr( (ID3D11Counter **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pCounterPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiDevice
//
////////////////////////////////////////////////////////////

class CMultiDevice : public CDevice
{
    CDevice **m_pDevicePtrArray;
    int m_nDeviceCount;

public:
    CMultiDevice( int nCount );
    CMultiDevice( CDevice **pDevicePtrArray, int nCount );
    ~CMultiDevice();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nDeviceCount; }
    void SetSubDevice( int index, CDevice *pDevice );
    virtual CDevice *Src() { return GetSubDevice( 0 ); }
    virtual CDevice *Ref() { return GetSubDevice( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pDevicePtrArray[0]->GetIUnknown(); }

    //
    // CDevice Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Device **pInterface ) { m_pDevicePtrArray[0]->GetInterfacePtr( (ID3D10Device **) pInterface ); }
    void GetInterfacePtr( ID3D11Device **pInterface ) { m_pDevicePtrArray[0]->GetInterfacePtr( (ID3D11Device **) pInterface ); }
    void GetInterfacePtr( ID3D10Device1 **pInterface ) { m_pDevicePtrArray[0]->GetInterfacePtr( (ID3D10Device1 **) pInterface ); }
    CDevice *GetSubDevice( int index ) { return m_pDevicePtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // VSSetConstantBuffers
    ////////////////////////////////////////////////////////////
    void VSSetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer *const * ppConstantBuffers );

    void VSSetConstantBuffers1( UINT StartSlot, UINT NumBuffers, CBuffer *const* ppConstantBuffers, UINT32 const* pOffsets, UINT32 const* ppNumConstants );

    ////////////////////////////////////////////////////////////
    // PSSetShaderResources
    ////////////////////////////////////////////////////////////
    void PSSetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView *const * ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // PSSetShader
    ////////////////////////////////////////////////////////////
    void PSSetShader(  CPixelShader * pPixelShader );

    ////////////////////////////////////////////////////////////
    // PSSetSamplers
    ////////////////////////////////////////////////////////////
    void PSSetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState *const * ppSamplers );

    ////////////////////////////////////////////////////////////
    // VSSetShader
    ////////////////////////////////////////////////////////////
    void VSSetShader(  CVertexShader * pVertexShader );

    ////////////////////////////////////////////////////////////
    // DrawIndexed
    ////////////////////////////////////////////////////////////
    void DrawIndexed(  UINT IndexCount, UINT StartIndexLocation, INT BaseVertexLocation );

    ////////////////////////////////////////////////////////////
    // Draw
    ////////////////////////////////////////////////////////////
    void Draw(  UINT VertexCount, UINT StartVertexLocation );

    ////////////////////////////////////////////////////////////
    // PSSetConstantBuffers
    ////////////////////////////////////////////////////////////
    void PSSetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer *const * ppConstantBuffers );

    void PSSetConstantBuffers1( UINT StartSlot, UINT NumBuffers, CBuffer *const* ppConstantBuffers, UINT32 const* pOffsets, UINT32 const* ppNumConstants );

    ////////////////////////////////////////////////////////////
    // IASetInputLayout
    ////////////////////////////////////////////////////////////
    void IASetInputLayout(  CInputLayout * pInputLayout );

    ////////////////////////////////////////////////////////////
    // IASetVertexBuffers
    ////////////////////////////////////////////////////////////
    void IASetVertexBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer *const * ppVertexBuffers, const UINT * pStrides, const UINT * pOffsets );

    ////////////////////////////////////////////////////////////
    // IASetIndexBuffer
    ////////////////////////////////////////////////////////////
    void IASetIndexBuffer(  CBuffer * pIndexBuffer, DXGI_FORMAT Format, UINT Offset );

    ////////////////////////////////////////////////////////////
    // DrawIndexedInstanced
    ////////////////////////////////////////////////////////////
    void DrawIndexedInstanced(  UINT IndexCountPerInstance, UINT InstanceCount, UINT StartIndexLocation, INT BaseVertexLocation, UINT StartInstanceLocation );

    ////////////////////////////////////////////////////////////
    // DrawInstanced
    ////////////////////////////////////////////////////////////
    void DrawInstanced(  UINT VertexCountPerInstance, UINT InstanceCount, UINT StartVertexLocation, UINT StartInstanceLocation );

    ////////////////////////////////////////////////////////////
    // GSSetConstantBuffers
    ////////////////////////////////////////////////////////////
    void GSSetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer *const * ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // GSSetShader
    ////////////////////////////////////////////////////////////
    void GSSetShader(  CGeometryShader * pShader );

    ////////////////////////////////////////////////////////////
    // IASetPrimitiveTopology
    ////////////////////////////////////////////////////////////
    void IASetPrimitiveTopology(  D3D_PRIMITIVE_TOPOLOGY Topology );

    ////////////////////////////////////////////////////////////
    // VSSetShaderResources
    ////////////////////////////////////////////////////////////
    void VSSetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView *const * ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // VSSetSamplers
    ////////////////////////////////////////////////////////////
    void VSSetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState *const * ppSamplers );

    ////////////////////////////////////////////////////////////
    // SetPredication
    ////////////////////////////////////////////////////////////
    void SetPredication(  CPredicate * pPredicate, BOOL PredicateValue );

    ////////////////////////////////////////////////////////////
    // GSSetShaderResources
    ////////////////////////////////////////////////////////////
    void GSSetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView *const * ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // GSSetSamplers
    ////////////////////////////////////////////////////////////
    void GSSetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState *const * ppSamplers );

    ////////////////////////////////////////////////////////////
    // OMSetRenderTargets
    ////////////////////////////////////////////////////////////
    void OMSetRenderTargets(  UINT NumViews, CRenderTargetView *const * ppRenderTargetViews, CDepthStencilView * pDepthStencilView );

    ////////////////////////////////////////////////////////////
    // OMSetBlendState
    ////////////////////////////////////////////////////////////
    void OMSetBlendState(  CBlendState * pBlendState, const FLOAT BlendFactor[4], UINT SampleMask );

    ////////////////////////////////////////////////////////////
    // OMSetDepthStencilState
    ////////////////////////////////////////////////////////////
    void OMSetDepthStencilState(  CDepthStencilState * pDepthStencilState, UINT StencilRef );

    ////////////////////////////////////////////////////////////
    // SOSetTargets
    ////////////////////////////////////////////////////////////
    void SOSetTargets(  UINT NumBuffers, CBuffer *const * ppSOTargets, const UINT * pOffsets );

    ////////////////////////////////////////////////////////////
    // DrawAuto
    ////////////////////////////////////////////////////////////
    void DrawAuto(  );

    ////////////////////////////////////////////////////////////
    // RSSetState
    ////////////////////////////////////////////////////////////
    void RSSetState(  CRasterizerState * pRasterizerState );

    ////////////////////////////////////////////////////////////
    // RSSetViewports
    ////////////////////////////////////////////////////////////
    void RSSetViewports(  UINT NumViewports, const D3D_VIEWPORT * pViewports );

    ////////////////////////////////////////////////////////////
    // RSSetScissorRects
    ////////////////////////////////////////////////////////////
    void RSSetScissorRects(  UINT NumRects, const D3D_RECT * pRects );

    ////////////////////////////////////////////////////////////
    // CopySubresourceRegion
    ////////////////////////////////////////////////////////////
    void CopySubresourceRegion(  CResource * pDstResource, UINT DstSubresource, UINT DstX, UINT DstY, UINT DstZ, CResource * pSrcResource, UINT SrcSubresource, const D3D_BOX * pSrcBox );

    ////////////////////////////////////////////////////////////
    // CopyResource
    ////////////////////////////////////////////////////////////
    void CopyResource(  CResource * pDstResource, CResource * pSrcResource );

    ////////////////////////////////////////////////////////////
    // UpdateSubresource
    ////////////////////////////////////////////////////////////
    void UpdateSubresource(  CResource * pDstResource, UINT DstSubresource, const D3D_BOX * pDstBox, const void * pSrcData, UINT SrcRowPitch, UINT SrcDepthPitch );

    ////////////////////////////////////////////////////////////
    // ClearRenderTargetView
    ////////////////////////////////////////////////////////////
    void ClearRenderTargetView(  CRenderTargetView * pRenderTargetView, const FLOAT ColorRGBA[4] );

    ////////////////////////////////////////////////////////////
    // ClearDepthStencilView
    ////////////////////////////////////////////////////////////
    void ClearDepthStencilView(  CDepthStencilView * pDepthStencilView, UINT ClearFlags, FLOAT Depth, UINT8 Stencil );

    ////////////////////////////////////////////////////////////
    // GenerateMips
    ////////////////////////////////////////////////////////////
    void GenerateMips(  CShaderResourceView * pShaderResourceView );

    ////////////////////////////////////////////////////////////
    // ResolveSubresource
    ////////////////////////////////////////////////////////////
    void ResolveSubresource(  CResource * pDstResource, UINT DstSubresource, CResource * pSrcResource, UINT SrcSubresource, DXGI_FORMAT Format );

    ////////////////////////////////////////////////////////////
    // VSGetConstantBuffers
    ////////////////////////////////////////////////////////////
    void VSGetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer ** ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // PSGetShaderResources
    ////////////////////////////////////////////////////////////
    void PSGetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView ** ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // PSGetShader
    ////////////////////////////////////////////////////////////
    void PSGetShader(  CPixelShader ** ppPixelShader );

    ////////////////////////////////////////////////////////////
    // PSGetSamplers
    ////////////////////////////////////////////////////////////
    void PSGetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState ** ppSamplers );

    ////////////////////////////////////////////////////////////
    // VSGetShader
    ////////////////////////////////////////////////////////////
    void VSGetShader(  CVertexShader ** ppVertexShader );

    ////////////////////////////////////////////////////////////
    // PSGetConstantBuffers
    ////////////////////////////////////////////////////////////
    void PSGetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer ** ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // IAGetInputLayout
    ////////////////////////////////////////////////////////////
    void IAGetInputLayout(  CInputLayout ** ppInputLayout );

    ////////////////////////////////////////////////////////////
    // IAGetVertexBuffers
    ////////////////////////////////////////////////////////////
    void IAGetVertexBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer ** ppVertexBuffers, UINT * pStrides, UINT * pOffsets );

    ////////////////////////////////////////////////////////////
    // IAGetIndexBuffer
    ////////////////////////////////////////////////////////////
    void IAGetIndexBuffer(  CBuffer ** pIndexBuffer, DXGI_FORMAT * Format, UINT * Offset );

    ////////////////////////////////////////////////////////////
    // GSGetConstantBuffers
    ////////////////////////////////////////////////////////////
    void GSGetConstantBuffers(  UINT StartSlot, UINT NumBuffers, CBuffer ** ppConstantBuffers );

    ////////////////////////////////////////////////////////////
    // GSGetShader
    ////////////////////////////////////////////////////////////
    void GSGetShader(  CGeometryShader ** ppGeometryShader );

    ////////////////////////////////////////////////////////////
    // IAGetPrimitiveTopology
    ////////////////////////////////////////////////////////////
    void IAGetPrimitiveTopology(  D3D_PRIMITIVE_TOPOLOGY * pTopology );

    ////////////////////////////////////////////////////////////
    // VSGetShaderResources
    ////////////////////////////////////////////////////////////
    void VSGetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView ** ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // VSGetSamplers
    ////////////////////////////////////////////////////////////
    void VSGetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState ** ppSamplers );

    ////////////////////////////////////////////////////////////
    // GetPredication
    ////////////////////////////////////////////////////////////
    void GetPredication(  CPredicate ** ppPredicate, BOOL * pPredicateValue );

    ////////////////////////////////////////////////////////////
    // GSGetShaderResources
    ////////////////////////////////////////////////////////////
    void GSGetShaderResources(  UINT StartSlot, UINT NumViews, CShaderResourceView ** ppShaderResourceViews );

    ////////////////////////////////////////////////////////////
    // GSGetSamplers
    ////////////////////////////////////////////////////////////
    void GSGetSamplers(  UINT StartSlot, UINT NumSamplers, CSamplerState ** ppSamplers );

    ////////////////////////////////////////////////////////////
    // OMGetRenderTargets
    ////////////////////////////////////////////////////////////
    void OMGetRenderTargets(  UINT NumViews, CRenderTargetView ** ppRenderTargetViews, CDepthStencilView ** ppDepthStencilView );

    ////////////////////////////////////////////////////////////
    // OMGetBlendState
    ////////////////////////////////////////////////////////////
    void OMGetBlendState(  CBlendState ** ppBlendState, FLOAT BlendFactor[4], UINT * pSampleMask );

    ////////////////////////////////////////////////////////////
    // OMGetDepthStencilState
    ////////////////////////////////////////////////////////////
    void OMGetDepthStencilState(  CDepthStencilState ** ppDepthStencilState, UINT * pStencilRef );

    ////////////////////////////////////////////////////////////
    // SOGetTargets
    ////////////////////////////////////////////////////////////
    void SOGetTargets(  UINT NumBuffers, CBuffer ** ppSOTargets, UINT * pOffsets );

    ////////////////////////////////////////////////////////////
    // RSGetState
    ////////////////////////////////////////////////////////////
    void RSGetState(  CRasterizerState ** ppRasterizerState );

    ////////////////////////////////////////////////////////////
    // RSGetViewports
    ////////////////////////////////////////////////////////////
    void RSGetViewports(  UINT * NumViewports, D3D_VIEWPORT * pViewports );

    ////////////////////////////////////////////////////////////
    // RSGetScissorRects
    ////////////////////////////////////////////////////////////
    void RSGetScissorRects(  UINT * NumRects, D3D_RECT * pRects );

    ////////////////////////////////////////////////////////////
    // GetDeviceRemovedReason
    ////////////////////////////////////////////////////////////
    NRESULT GetDeviceRemovedReason(  );

    ////////////////////////////////////////////////////////////
    // SetExceptionMode
    ////////////////////////////////////////////////////////////
    NRESULT SetExceptionMode(  UINT RaiseFlags );

    ////////////////////////////////////////////////////////////
    // GetExceptionMode
    ////////////////////////////////////////////////////////////
    UINT GetExceptionMode(  );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );

    ////////////////////////////////////////////////////////////
    // ClearState
    ////////////////////////////////////////////////////////////
    void ClearState(  );

    ////////////////////////////////////////////////////////////
    // Flush
    ////////////////////////////////////////////////////////////
    void Flush(  );

    ////////////////////////////////////////////////////////////
    // CreateBuffer
    ////////////////////////////////////////////////////////////
    NRESULT CreateBuffer(  const D3D_BUFFER_DESC * pDesc, const D3D_SUBRESOURCE_DATA * pInitialData, CBuffer ** ppBuffer );

    ////////////////////////////////////////////////////////////
    // CreateTexture1D
    ////////////////////////////////////////////////////////////
    NRESULT CreateTexture1D(  const D3D_TEXTURE1D_DESC * pDesc, const D3D_SUBRESOURCE_DATA * pInitialData, CTexture1D ** ppTexture1D );

    ////////////////////////////////////////////////////////////
    // CreateTexture2D
    ////////////////////////////////////////////////////////////
    NRESULT CreateTexture2D(  const D3D_TEXTURE2D_DESC * pDesc, const D3D_SUBRESOURCE_DATA * pInitialData, CTexture2D ** ppTexture2D );

    ////////////////////////////////////////////////////////////
    // CreateTexture3D
    ////////////////////////////////////////////////////////////
    NRESULT CreateTexture3D(  const D3D_TEXTURE3D_DESC * pDesc, const D3D_SUBRESOURCE_DATA * pInitialData, CTexture3D ** ppTexture3D );

    ////////////////////////////////////////////////////////////
    // CreateShaderResourceView
    ////////////////////////////////////////////////////////////
    NRESULT CreateShaderResourceView(  CResource * pResource, const D3D_SHADER_RESOURCE_VIEW_DESC * pDesc, CShaderResourceView ** ppSRView );

    ////////////////////////////////////////////////////////////
    // CreateRenderTargetView
    ////////////////////////////////////////////////////////////
    NRESULT CreateRenderTargetView(  CResource * pResource, const D3D_RENDER_TARGET_VIEW_DESC * pDesc, CRenderTargetView ** ppRTView );

    ////////////////////////////////////////////////////////////
    // CreateDepthStencilView
    ////////////////////////////////////////////////////////////
    NRESULT CreateDepthStencilView(  CResource * pResource, const D3D_DEPTH_STENCIL_VIEW_DESC * pDesc, CDepthStencilView ** ppDepthStencilView );

    ////////////////////////////////////////////////////////////
    // CreateInputLayout
    ////////////////////////////////////////////////////////////
    NRESULT CreateInputLayout(  const D3D_INPUT_ELEMENT_DESC * pInputElementDescs, UINT NumElements, const void * pShaderBytecodeWithInputSignature, SIZE_T BytecodeLength, CInputLayout ** ppInputLayout );

    ////////////////////////////////////////////////////////////
    // CreateVertexShader
    ////////////////////////////////////////////////////////////
    NRESULT CreateVertexShader(  const void * pShaderBytecode, SIZE_T BytecodeLength, CVertexShader ** ppVertexShader );

    ////////////////////////////////////////////////////////////
    // CreateGeometryShader
    ////////////////////////////////////////////////////////////
    NRESULT CreateGeometryShader(  const void * pShaderBytecode, SIZE_T BytecodeLength, CGeometryShader ** ppGeometryShader );

    ////////////////////////////////////////////////////////////
    // CreateGeometryShaderWithStreamOutput
    ////////////////////////////////////////////////////////////
    NRESULT CreateGeometryShaderWithStreamOutput(  const void * pShaderBytecode, SIZE_T BytecodeLength, const D3D_SO_DECLARATION_ENTRY * pSODeclaration, UINT NumEntries, UINT OutputStreamStride, CGeometryShader ** ppGeometryShader );

    ////////////////////////////////////////////////////////////
    // CreatePixelShader
    ////////////////////////////////////////////////////////////
    NRESULT CreatePixelShader(  const void * pShaderBytecode, SIZE_T BytecodeLength, CPixelShader ** ppPixelShader );

    ////////////////////////////////////////////////////////////
    // CreateBlendState
    ////////////////////////////////////////////////////////////
    NRESULT CreateBlendState(  const D3D_BLEND_DESC * pBlendStateDesc, CBlendState ** ppBlendState );

    ////////////////////////////////////////////////////////////
    // CreateDepthStencilState
    ////////////////////////////////////////////////////////////
    NRESULT CreateDepthStencilState(  const D3D_DEPTH_STENCIL_DESC * pDepthStencilDesc, CDepthStencilState ** ppDepthStencilState );

    ////////////////////////////////////////////////////////////
    // CreateRasterizerState
    ////////////////////////////////////////////////////////////
    NRESULT CreateRasterizerState(  const D3D_RASTERIZER_DESC * pRasterizerDesc, CRasterizerState ** ppRasterizerState );

    ////////////////////////////////////////////////////////////
    // CreateSamplerState
    ////////////////////////////////////////////////////////////
    NRESULT CreateSamplerState(  const D3D_SAMPLER_DESC * pSamplerDesc, CSamplerState ** ppSamplerState );

    ////////////////////////////////////////////////////////////
    // CreateQuery
    ////////////////////////////////////////////////////////////
    NRESULT CreateQuery(  const D3D_QUERY_DESC * pQueryDesc, CQuery ** ppQuery );

    ////////////////////////////////////////////////////////////
    // CreatePredicate
    ////////////////////////////////////////////////////////////
    NRESULT CreatePredicate(  const D3D_QUERY_DESC * pPredicateDesc, CPredicate ** ppPredicate );

    ////////////////////////////////////////////////////////////
    // CreateCounter
    ////////////////////////////////////////////////////////////
    NRESULT CreateCounter(  const D3D_COUNTER_DESC * pCounterDesc, CCounter ** ppCounter );

    ////////////////////////////////////////////////////////////
    // CheckFormatSupport
    ////////////////////////////////////////////////////////////
    NRESULT CheckFormatSupport(  DXGI_FORMAT Format, UINT * pFormatSupport );

    ////////////////////////////////////////////////////////////
    // CheckMultisampleQualityLevels
    ////////////////////////////////////////////////////////////
    NRESULT CheckMultisampleQualityLevels(  DXGI_FORMAT Format, UINT SampleCount, UINT * pNumQualityLevels );

    ////////////////////////////////////////////////////////////
    // CheckCounterInfo
    ////////////////////////////////////////////////////////////
    void CheckCounterInfo(  D3D_COUNTER_INFO * pCounterInfo );

    ////////////////////////////////////////////////////////////
    // CheckCounter
    ////////////////////////////////////////////////////////////
    NRESULT CheckCounter(  const D3D_COUNTER_DESC * pDesc, D3D_COUNTER_TYPE * pType, UINT * pActiveCounters, LPSTR szName, UINT * pNameLength, LPSTR szUnits, UINT * pUnitsLength, LPSTR szDescription, UINT * pDescriptionLength );

    ////////////////////////////////////////////////////////////
    // GetCreationFlags
    ////////////////////////////////////////////////////////////
    UINT GetCreationFlags(  );

    ////////////////////////////////////////////////////////////
    // OpenSharedResource
    ////////////////////////////////////////////////////////////
    NRESULT OpenSharedResource(  HANDLE hResource, REFIID ReturnedInterface, void ** ppResource );

    ////////////////////////////////////////////////////////////
    // SetTextFilterSize
    ////////////////////////////////////////////////////////////
    void SetTextFilterSize(  UINT Width, UINT Height );

    ////////////////////////////////////////////////////////////
    // GetTextFilterSize
    ////////////////////////////////////////////////////////////
    void GetTextFilterSize(  UINT * pWidth, UINT * pHeight );

    ////////////////////////////////////////////////////////////
    // CreateShaderResourceView1
    ////////////////////////////////////////////////////////////
    NRESULT CreateShaderResourceView1(  CResource * pResource, const D3D_SHADER_RESOURCE_VIEW_DESC1 * pDesc, CShaderResourceView1 ** ppSRView );

    ////////////////////////////////////////////////////////////
    // CreateBlendState1
    ////////////////////////////////////////////////////////////
    NRESULT CreateBlendState1(  const D3D_BLEND_DESC1 * pBlendStateDesc, CBlendState1 ** ppBlendState );

    ////////////////////////////////////////////////////////////
    // GetFeatureLevel
    ////////////////////////////////////////////////////////////
    D3D_FEATURE_LEVEL1 GetFeatureLevel(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
    virtual HRESULT CreateTexture2DFromSwapChain( IDXGISwapChain *ppSwapChain[], CTexture2D ** ppTexture2D );
    virtual HRESULT CreateDebug( CDebug *ppDebug[] );
    virtual HRESULT CreateInfoQueue( CInfoQueue *ppInfoQueue[] );
    virtual HRESULT CreateMultithread( CMultithread *ppMultithread[] );
    virtual HRESULT CreateSwitchToRef( CSwitchToRef *ppSwitchToRef[] );
};


////////////////////////////////////////////////////////////
//
// CMultiMultithread
//
////////////////////////////////////////////////////////////

class CMultiMultithread : public CMultithread
{
    CMultithread **m_pMultithreadPtrArray;
    int m_nMultithreadCount;

public:
    CMultiMultithread( int nCount );
    CMultiMultithread( CMultithread **pMultithreadPtrArray, int nCount );
    ~CMultiMultithread();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nMultithreadCount; }
    void SetSubMultithread( int index, CMultithread *pMultithread );
    virtual CMultithread *Src() { return GetSubMultithread( 0 ); }
    virtual CMultithread *Ref() { return GetSubMultithread( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pMultithreadPtrArray[0]->GetIUnknown(); }

    //
    // CMultithread Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Multithread **pInterface ) { m_pMultithreadPtrArray[0]->GetInterfacePtr( (ID3D10Multithread **) pInterface ); }
    CMultithread *GetSubMultithread( int index ) { return m_pMultithreadPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // Enter
    ////////////////////////////////////////////////////////////
    void Enter(  );

    ////////////////////////////////////////////////////////////
    // Leave
    ////////////////////////////////////////////////////////////
    void Leave(  );

    ////////////////////////////////////////////////////////////
    // SetMultithreadProtected
    ////////////////////////////////////////////////////////////
    BOOL SetMultithreadProtected(  BOOL bMTProtect );

    ////////////////////////////////////////////////////////////
    // GetMultithreadProtected
    ////////////////////////////////////////////////////////////
    BOOL GetMultithreadProtected(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiDebug
//
////////////////////////////////////////////////////////////

class CMultiDebug : public CDebug
{
    CDebug **m_pDebugPtrArray;
    int m_nDebugCount;

public:
    CMultiDebug( int nCount );
    CMultiDebug( CDebug **pDebugPtrArray, int nCount );
    ~CMultiDebug();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nDebugCount; }
    void SetSubDebug( int index, CDebug *pDebug );
    virtual CDebug *Src() { return GetSubDebug( 0 ); }
    virtual CDebug *Ref() { return GetSubDebug( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pDebugPtrArray[0]->GetIUnknown(); }

    //
    // CDebug Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Debug **pInterface ) { m_pDebugPtrArray[0]->GetInterfacePtr( (ID3D10Debug **) pInterface ); }
    void GetInterfacePtr( ID3D11Debug **pInterface ) { m_pDebugPtrArray[0]->GetInterfacePtr( (ID3D11Debug **) pInterface ); }
    CDebug *GetSubDebug( int index ) { return m_pDebugPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // SetFeatureMask
    ////////////////////////////////////////////////////////////
    NRESULT SetFeatureMask(  UINT Mask );

    ////////////////////////////////////////////////////////////
    // GetFeatureMask
    ////////////////////////////////////////////////////////////
    UINT GetFeatureMask(  );

    ////////////////////////////////////////////////////////////
    // SetPresentPerRenderOpDelay
    ////////////////////////////////////////////////////////////
    NRESULT SetPresentPerRenderOpDelay(  UINT Milliseconds );

    ////////////////////////////////////////////////////////////
    // GetPresentPerRenderOpDelay
    ////////////////////////////////////////////////////////////
    UINT GetPresentPerRenderOpDelay(  );

    ////////////////////////////////////////////////////////////
    // SetSwapChain
    ////////////////////////////////////////////////////////////
    NRESULT SetSwapChain(  IDXGISwapChain * pSwapChain );

    ////////////////////////////////////////////////////////////
    // GetSwapChain
    ////////////////////////////////////////////////////////////
    NRESULT GetSwapChain(  IDXGISwapChain ** ppSwapChain );

    ////////////////////////////////////////////////////////////
    // Validate
    ////////////////////////////////////////////////////////////
    NRESULT Validate(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiSwitchToRef
//
////////////////////////////////////////////////////////////

class CMultiSwitchToRef : public CSwitchToRef
{
    CSwitchToRef **m_pSwitchToRefPtrArray;
    int m_nSwitchToRefCount;

public:
    CMultiSwitchToRef( int nCount );
    CMultiSwitchToRef( CSwitchToRef **pSwitchToRefPtrArray, int nCount );
    ~CMultiSwitchToRef();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nSwitchToRefCount; }
    void SetSubSwitchToRef( int index, CSwitchToRef *pSwitchToRef );
    virtual CSwitchToRef *Src() { return GetSubSwitchToRef( 0 ); }
    virtual CSwitchToRef *Ref() { return GetSubSwitchToRef( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pSwitchToRefPtrArray[0]->GetIUnknown(); }

    //
    // CSwitchToRef Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10SwitchToRef **pInterface ) { m_pSwitchToRefPtrArray[0]->GetInterfacePtr( (ID3D10SwitchToRef **) pInterface ); }
    void GetInterfacePtr( ID3D11SwitchToRef **pInterface ) { m_pSwitchToRefPtrArray[0]->GetInterfacePtr( (ID3D11SwitchToRef **) pInterface ); }
    CSwitchToRef *GetSubSwitchToRef( int index ) { return m_pSwitchToRefPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // SetUseRef
    ////////////////////////////////////////////////////////////
    BOOL SetUseRef(  BOOL UseRef );

    ////////////////////////////////////////////////////////////
    // GetUseRef
    ////////////////////////////////////////////////////////////
    BOOL GetUseRef(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiInfoQueue
//
////////////////////////////////////////////////////////////

class CMultiInfoQueue : public CInfoQueue
{
    CInfoQueue **m_pInfoQueuePtrArray;
    int m_nInfoQueueCount;

public:
    CMultiInfoQueue( int nCount );
    CMultiInfoQueue( CInfoQueue **pInfoQueuePtrArray, int nCount );
    ~CMultiInfoQueue();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nInfoQueueCount; }
    void SetSubInfoQueue( int index, CInfoQueue *pInfoQueue );
    virtual CInfoQueue *Src() { return GetSubInfoQueue( 0 ); }
    virtual CInfoQueue *Ref() { return GetSubInfoQueue( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pInfoQueuePtrArray[0]->GetIUnknown(); }

    //
    // CInfoQueue Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10InfoQueue **pInterface ) { m_pInfoQueuePtrArray[0]->GetInterfacePtr( (ID3D10InfoQueue **) pInterface ); }
    void GetInterfacePtr( ID3D11InfoQueue **pInterface ) { m_pInfoQueuePtrArray[0]->GetInterfacePtr( (ID3D11InfoQueue **) pInterface ); }
    CInfoQueue *GetSubInfoQueue( int index ) { return m_pInfoQueuePtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // SetMessageCountLimit
    ////////////////////////////////////////////////////////////
    NRESULT SetMessageCountLimit(  UINT64 MessageCountLimit );

    ////////////////////////////////////////////////////////////
    // ClearStoredMessages
    ////////////////////////////////////////////////////////////
    void ClearStoredMessages(  );

    ////////////////////////////////////////////////////////////
    // GetMessage
    ////////////////////////////////////////////////////////////
    NRESULT GetMessage(  UINT64 MessageIndex, D3D_MESSAGE * pMessage, SIZE_T * pMessageByteLength );

    ////////////////////////////////////////////////////////////
    // GetNumMessagesAllowedByStorageFilter
    ////////////////////////////////////////////////////////////
    UINT64 GetNumMessagesAllowedByStorageFilter(  );

    ////////////////////////////////////////////////////////////
    // GetNumMessagesDeniedByStorageFilter
    ////////////////////////////////////////////////////////////
    UINT64 GetNumMessagesDeniedByStorageFilter(  );

    ////////////////////////////////////////////////////////////
    // GetNumStoredMessages
    ////////////////////////////////////////////////////////////
    UINT64 GetNumStoredMessages(  );

    ////////////////////////////////////////////////////////////
    // GetNumStoredMessagesAllowedByRetrievalFilter
    ////////////////////////////////////////////////////////////
    UINT64 GetNumStoredMessagesAllowedByRetrievalFilter(  );

    ////////////////////////////////////////////////////////////
    // GetNumMessagesDiscardedByMessageCountLimit
    ////////////////////////////////////////////////////////////
    UINT64 GetNumMessagesDiscardedByMessageCountLimit(  );

    ////////////////////////////////////////////////////////////
    // GetMessageCountLimit
    ////////////////////////////////////////////////////////////
    UINT64 GetMessageCountLimit(  );

    ////////////////////////////////////////////////////////////
    // AddStorageFilterEntries
    ////////////////////////////////////////////////////////////
    NRESULT AddStorageFilterEntries(  D3D_INFO_QUEUE_FILTER * pFilter );

    ////////////////////////////////////////////////////////////
    // GetStorageFilter
    ////////////////////////////////////////////////////////////
    NRESULT GetStorageFilter(  D3D_INFO_QUEUE_FILTER * pFilter, SIZE_T * pFilterByteLength );

    ////////////////////////////////////////////////////////////
    // ClearStorageFilter
    ////////////////////////////////////////////////////////////
    void ClearStorageFilter(  );

    ////////////////////////////////////////////////////////////
    // PushEmptyStorageFilter
    ////////////////////////////////////////////////////////////
    NRESULT PushEmptyStorageFilter(  );

    ////////////////////////////////////////////////////////////
    // PushCopyOfStorageFilter
    ////////////////////////////////////////////////////////////
    NRESULT PushCopyOfStorageFilter(  );

    ////////////////////////////////////////////////////////////
    // PushStorageFilter
    ////////////////////////////////////////////////////////////
    NRESULT PushStorageFilter(  D3D_INFO_QUEUE_FILTER * pFilter );

    ////////////////////////////////////////////////////////////
    // PopStorageFilter
    ////////////////////////////////////////////////////////////
    void PopStorageFilter(  );

    ////////////////////////////////////////////////////////////
    // GetStorageFilterStackSize
    ////////////////////////////////////////////////////////////
    UINT GetStorageFilterStackSize(  );

    ////////////////////////////////////////////////////////////
    // AddRetrievalFilterEntries
    ////////////////////////////////////////////////////////////
    NRESULT AddRetrievalFilterEntries(  D3D_INFO_QUEUE_FILTER * pFilter );

    ////////////////////////////////////////////////////////////
    // GetRetrievalFilter
    ////////////////////////////////////////////////////////////
    NRESULT GetRetrievalFilter(  D3D_INFO_QUEUE_FILTER * pFilter, SIZE_T * pFilterByteLength );

    ////////////////////////////////////////////////////////////
    // ClearRetrievalFilter
    ////////////////////////////////////////////////////////////
    void ClearRetrievalFilter(  );

    ////////////////////////////////////////////////////////////
    // PushEmptyRetrievalFilter
    ////////////////////////////////////////////////////////////
    NRESULT PushEmptyRetrievalFilter(  );

    ////////////////////////////////////////////////////////////
    // PushCopyOfRetrievalFilter
    ////////////////////////////////////////////////////////////
    NRESULT PushCopyOfRetrievalFilter(  );

    ////////////////////////////////////////////////////////////
    // PushRetrievalFilter
    ////////////////////////////////////////////////////////////
    NRESULT PushRetrievalFilter(  D3D_INFO_QUEUE_FILTER * pFilter );

    ////////////////////////////////////////////////////////////
    // PopRetrievalFilter
    ////////////////////////////////////////////////////////////
    void PopRetrievalFilter(  );

    ////////////////////////////////////////////////////////////
    // GetRetrievalFilterStackSize
    ////////////////////////////////////////////////////////////
    UINT GetRetrievalFilterStackSize(  );

    ////////////////////////////////////////////////////////////
    // AddMessage
    ////////////////////////////////////////////////////////////
    NRESULT AddMessage(  D3D_MESSAGE_CATEGORY Category, D3D_MESSAGE_SEVERITY Severity, D3D_MESSAGE_ID ID, LPCSTR pDescription );

    ////////////////////////////////////////////////////////////
    // AddApplicationMessage
    ////////////////////////////////////////////////////////////
    NRESULT AddApplicationMessage(  D3D_MESSAGE_SEVERITY Severity, LPCSTR pDescription );

    ////////////////////////////////////////////////////////////
    // SetBreakOnCategory
    ////////////////////////////////////////////////////////////
    NRESULT SetBreakOnCategory(  D3D_MESSAGE_CATEGORY Category, BOOL bEnable );

    ////////////////////////////////////////////////////////////
    // SetBreakOnSeverity
    ////////////////////////////////////////////////////////////
    NRESULT SetBreakOnSeverity(  D3D_MESSAGE_SEVERITY Severity, BOOL bEnable );

    ////////////////////////////////////////////////////////////
    // SetBreakOnID
    ////////////////////////////////////////////////////////////
    NRESULT SetBreakOnID(  D3D_MESSAGE_ID ID, BOOL bEnable );

    ////////////////////////////////////////////////////////////
    // GetBreakOnCategory
    ////////////////////////////////////////////////////////////
    BOOL GetBreakOnCategory(  D3D_MESSAGE_CATEGORY Category );

    ////////////////////////////////////////////////////////////
    // GetBreakOnSeverity
    ////////////////////////////////////////////////////////////
    BOOL GetBreakOnSeverity(  D3D_MESSAGE_SEVERITY Severity );

    ////////////////////////////////////////////////////////////
    // GetBreakOnID
    ////////////////////////////////////////////////////////////
    BOOL GetBreakOnID(  D3D_MESSAGE_ID ID );

    ////////////////////////////////////////////////////////////
    // SetMuteDebugOutput
    ////////////////////////////////////////////////////////////
    void SetMuteDebugOutput(  BOOL bMute );

    ////////////////////////////////////////////////////////////
    // GetMuteDebugOutput
    ////////////////////////////////////////////////////////////
    BOOL GetMuteDebugOutput(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiBlob
//
////////////////////////////////////////////////////////////

class CMultiBlob : public CBlob
{
    CBlob **m_pBlobPtrArray;
    int m_nBlobCount;

public:
    CMultiBlob( int nCount );
    CMultiBlob( CBlob **pBlobPtrArray, int nCount );
    ~CMultiBlob();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nBlobCount; }
    void SetSubBlob( int index, CBlob *pBlob );
    virtual CBlob *Src() { return GetSubBlob( 0 ); }
    virtual CBlob *Ref() { return GetSubBlob( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pBlobPtrArray[0]->GetIUnknown(); }

    //
    // CBlob Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10Blob **pInterface ) { m_pBlobPtrArray[0]->GetInterfacePtr( (ID3D10Blob **) pInterface ); }
    void GetInterfacePtr( ID3D11Blob **pInterface ) { m_pBlobPtrArray[0]->GetInterfacePtr( (ID3D11Blob **) pInterface ); }
    CBlob *GetSubBlob( int index ) { return m_pBlobPtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // QueryInterface
    ////////////////////////////////////////////////////////////
    NRESULT QueryInterface(  REFIID iid, LPVOID * ppv );

    ////////////////////////////////////////////////////////////
    // GetBufferPointer
    ////////////////////////////////////////////////////////////
    LPVOID GetBufferPointer(  );

    ////////////////////////////////////////////////////////////
    // GetBufferSize
    ////////////////////////////////////////////////////////////
    SIZE_T GetBufferSize(  );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiBlendState1
//
////////////////////////////////////////////////////////////

class CMultiBlendState1 : public CMultiBlendState, public CBlendState1
{
    CBlendState1 **m_pBlendState1PtrArray;
    int m_nBlendState1Count;

public:
    CMultiBlendState1( int nCount );
    CMultiBlendState1( CBlendState1 **pBlendState1PtrArray, int nCount );
    ~CMultiBlendState1();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nBlendState1Count; }
    void SetSubBlendState( int index, CBlendState *pBlendState ) {}
    void SetSubBlendState1( int index, CBlendState1 *pBlendState1 );
    virtual CBlendState1 *Src() { return GetSubBlendState1( 0 ); }
    virtual CBlendState1 *Ref() { return GetSubBlendState1( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pBlendState1PtrArray[0]->GetIUnknown(); }

    //
    // CBlendState1 Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10BlendState1 **pInterface ) { m_pBlendState1PtrArray[0]->GetInterfacePtr( (ID3D10BlendState1 **) pInterface ); }
    CBlendState1 *GetSubBlendState1( int index ) { return m_pBlendState1PtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDesc1
    ////////////////////////////////////////////////////////////
    void GetDesc1(  D3D_BLEND_DESC1 * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CBlendState Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10BlendState **pInterface ) { m_pBlendState1PtrArray[0]->GetInterfacePtr( (ID3D10BlendState1 **) pInterface ); }
    void GetInterfacePtr( ID3D11BlendState **pInterface ) { m_pBlendState1PtrArray[0]->GetInterfacePtr( (ID3D11BlendState **) pInterface ); }
    CBlendState *GetSubBlendState( int index ) { return m_pBlendState1PtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_BLEND_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pBlendState1PtrArray[0]->GetInterfacePtr( (ID3D10BlendState1 **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pBlendState1PtrArray[0]->GetInterfacePtr( (ID3D11BlendState **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pBlendState1PtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};


////////////////////////////////////////////////////////////
//
// CMultiShaderResourceView1
//
////////////////////////////////////////////////////////////

class CMultiShaderResourceView1 : public CMultiShaderResourceView, public CShaderResourceView1
{
    CShaderResourceView1 **m_pShaderResourceView1PtrArray;
    int m_nShaderResourceView1Count;

public:
    CMultiShaderResourceView1( int nCount );
    CMultiShaderResourceView1( CShaderResourceView1 **pShaderResourceView1PtrArray, int nCount );
    ~CMultiShaderResourceView1();

    ////////////////////////////////////////////////////////////
    // Sub object accessors
    ////////////////////////////////////////////////////////////
    int GetSubObjectCount() const { return m_nShaderResourceView1Count; }
    void SetSubShaderResourceView( int index, CShaderResourceView *pShaderResourceView ) {}
    void SetSubShaderResourceView1( int index, CShaderResourceView1 *pShaderResourceView1 );
    virtual CShaderResourceView1 *Src() { return GetSubShaderResourceView1( 0 ); }
    virtual CShaderResourceView1 *Ref() { return GetSubShaderResourceView1( 1 ); }
    virtual IUnknown *GetIUnknown() { return m_pShaderResourceView1PtrArray[0]->GetIUnknown(); }

    //
    // CShaderResourceView1 Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10ShaderResourceView1 **pInterface ) { m_pShaderResourceView1PtrArray[0]->GetInterfacePtr( (ID3D10ShaderResourceView1 **) pInterface ); }
    CShaderResourceView1 *GetSubShaderResourceView1( int index ) { return m_pShaderResourceView1PtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDesc1
    ////////////////////////////////////////////////////////////
    void GetDesc1(  D3D_SHADER_RESOURCE_VIEW_DESC1 * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CShaderResourceView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10ShaderResourceView **pInterface ) { m_pShaderResourceView1PtrArray[0]->GetInterfacePtr( (ID3D10ShaderResourceView1 **) pInterface ); }
    void GetInterfacePtr( ID3D11ShaderResourceView **pInterface ) { m_pShaderResourceView1PtrArray[0]->GetInterfacePtr( (ID3D11ShaderResourceView **) pInterface ); }
    CShaderResourceView *GetSubShaderResourceView( int index ) { return m_pShaderResourceView1PtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDesc
    ////////////////////////////////////////////////////////////
    void GetDesc(  D3D_SHADER_RESOURCE_VIEW_DESC * pDesc );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CView Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10View **pInterface ) { m_pShaderResourceView1PtrArray[0]->GetInterfacePtr( (ID3D10ShaderResourceView1 **) pInterface ); }
    void GetInterfacePtr( ID3D11View **pInterface ) { m_pShaderResourceView1PtrArray[0]->GetInterfacePtr( (ID3D11ShaderResourceView **) pInterface ); }
    CView *GetSubView( int index ) { return m_pShaderResourceView1PtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetResource
    ////////////////////////////////////////////////////////////
    void GetResource(  CResource ** ppResource );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////

    //
    // CDeviceChild Overrides
    //

    ////////////////////////////////////////////////////////////
    // GetInterfacePtr
    ////////////////////////////////////////////////////////////
    void GetInterfacePtr( ID3D10DeviceChild **pInterface ) { m_pShaderResourceView1PtrArray[0]->GetInterfacePtr( (ID3D10ShaderResourceView1 **) pInterface ); }
    void GetInterfacePtr( ID3D11DeviceChild **pInterface ) { m_pShaderResourceView1PtrArray[0]->GetInterfacePtr( (ID3D11ShaderResourceView **) pInterface ); }
    CDeviceChild *GetSubDeviceChild( int index ) { return m_pShaderResourceView1PtrArray[index]; }

    ////////////////////////////////////////////////////////////
    // GetDevice
    ////////////////////////////////////////////////////////////
    void GetDevice(  CDevice ** ppDevice );

    ////////////////////////////////////////////////////////////
    // GetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT GetPrivateData(  REFGUID guid, UINT * pDataSize, void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateData
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateData(  REFGUID guid, UINT DataSize, const void * pData );

    ////////////////////////////////////////////////////////////
    // SetPrivateDataInterface
    ////////////////////////////////////////////////////////////
    NRESULT SetPrivateDataInterface(  REFGUID guid, const IUnknown * pData );


    ////////////////////////////////////////////////////////////
    // Extra Methods
    ////////////////////////////////////////////////////////////
};
