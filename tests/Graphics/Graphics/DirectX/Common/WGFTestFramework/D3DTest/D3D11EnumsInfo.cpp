//*****************************************************************************
//***                        THIS FILE IS GENERATED                        ****
//***                       DO NOT MODIFY THIS FILE !!!                    ****
//*****************************************************************************
//*****************************************************************************
//* File: D3D11EnumsInfo.cpp
//* 
//* Description: 
//*     Defines classes used to categorize enums
//*
//*****************************************************************************

#include "pch.h"
#include "D3D11EnumsInfo.h"

//////////////////////////////////////////////////////////////////////////
// D3D11_BIND_FLAG related definitions
//////////////////////////////////////////////////////////////////////////

tstring WGFTESTAPI ToString( D3D11_BIND_FLAG D3D11BindFlag )
{
	const D3D11BindFlagInfo *pD3D11BindFlagInfo = CD3D11BindFlagInfoMap::Find( D3D11BindFlag );
	
	if( pD3D11BindFlagInfo )
		return tstring( pD3D11BindFlagInfo->szName );
	else
		return tstring( _T( "(Unknown value)" ) );
}

//------------------------------------------------------------------------

bool WGFTESTAPI FromString( D3D11_BIND_FLAG *pD3D11BindFlag, const tstring &str )
{
	const D3D11BindFlagInfo *pD3D11BindFlagInfo = CD3D11BindFlagInfoMap::Find( str );

	if( pD3D11BindFlagInfo )
	{
		*pD3D11BindFlag = pD3D11BindFlagInfo->D3D11BindFlag;
		return true;
	}

	//BUGBUG - elenakr - what to return for other enums ???
	//*pFormat = D3D_FORMAT_UNKNOWN;
	pD3D11BindFlag = NULL;
	return false;
}

//------------------------------------------------------------------------

const D3D11BindFlagInfo CD3D11BindFlagInfoMap::m_D3D11BindFlagInfoTable[] =
{
    { (D3D11_BIND_FLAG) (0), _T( "0" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER), _T( "VERTEX_BUFFER" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER), _T( "VERTEX_BUFFER|INDEX_BUFFER" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER), _T( "VERTEX_BUFFER|CONSTANT_BUFFER" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_SHADER_RESOURCE), _T( "VERTEX_BUFFER|SHADER_RESOURCE" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|INDEX_BUFFER|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_VERTEX_BUFFER|D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "VERTEX_BUFFER|INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER), _T( "INDEX_BUFFER" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER), _T( "INDEX_BUFFER|CONSTANT_BUFFER" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE), _T( "INDEX_BUFFER|SHADER_RESOURCE" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_STREAM_OUTPUT), _T( "INDEX_BUFFER|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT), _T( "INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|CONSTANT_BUFFER|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT), _T( "INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_INDEX_BUFFER|D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "INDEX_BUFFER|CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER), _T( "CONSTANT_BUFFER" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE), _T( "CONSTANT_BUFFER|SHADER_RESOURCE" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT), _T( "CONSTANT_BUFFER|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_RENDER_TARGET), _T( "CONSTANT_BUFFER|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT), _T( "CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET), _T( "CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_CONSTANT_BUFFER|D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "CONSTANT_BUFFER|SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_SHADER_RESOURCE), _T( "SHADER_RESOURCE" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT), _T( "SHADER_RESOURCE|STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET), _T( "SHADER_RESOURCE|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_DEPTH_STENCIL), _T( "SHADER_RESOURCE|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "SHADER_RESOURCE|STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "SHADER_RESOURCE|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_SHADER_RESOURCE|D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "SHADER_RESOURCE|STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_STREAM_OUTPUT), _T( "STREAM_OUTPUT" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET), _T( "STREAM_OUTPUT|RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_DEPTH_STENCIL), _T( "STREAM_OUTPUT|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_STREAM_OUTPUT|D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "STREAM_OUTPUT|RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_RENDER_TARGET), _T( "RENDER_TARGET" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_RENDER_TARGET|D3D11_BIND_DEPTH_STENCIL), _T( "RENDER_TARGET|DEPTH_STENCIL" ) },
    { (D3D11_BIND_FLAG) (D3D11_BIND_DEPTH_STENCIL), _T( "DEPTH_STENCIL" ) },

};

//------------------------------------------------------------------------

// Instantiate the singleton
CD3D11BindFlagInfoMap CD3D11BindFlagInfoMap::m_Map;

//------------------------------------------------------------------------

// Construct the lookup table.
CD3D11BindFlagInfoMap::CD3D11BindFlagInfoMap()
{
	size_t count = GetD3D11BindFlagInfoTableSize();

	for(size_t i = 0; i < count; i++ )
	{
		m_ByValue.insert( ByValue::value_type( m_D3D11BindFlagInfoTable[i].D3D11BindFlag, &m_D3D11BindFlagInfoTable[i] ) );
		m_ByDesc.insert( ByDesc::value_type( m_D3D11BindFlagInfoTable[i].szName, &m_D3D11BindFlagInfoTable[i] ) );
	}
}

//------------------------------------------------------------------------

const D3D11BindFlagInfo *CD3D11BindFlagInfoMap::Find( D3D11_BIND_FLAG D3D11BindFlag )
{
	ByValue::const_iterator it = m_Map.m_ByValue.find( D3D11BindFlag );
	if( it == m_Map.m_ByValue.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const D3D11BindFlagInfo *CD3D11BindFlagInfoMap::Find( const tstring &Desc )
{
	ByDesc::const_iterator it = m_Map.m_ByDesc.find( Desc );
	if( it == m_Map.m_ByDesc.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const size_t CD3D11BindFlagInfoMap::GetD3D11BindFlagInfoTableSize()
{
	return sizeof(m_D3D11BindFlagInfoTable) / sizeof(m_D3D11BindFlagInfoTable[0]);
}


//////////////////////////////////////////////////////////////////////////
// D3D11_CPU_ACCESS_FLAG related definitions
//////////////////////////////////////////////////////////////////////////

tstring WGFTESTAPI ToString( D3D11_CPU_ACCESS_FLAG D3D11CpuAccessFlag )
{
	const D3D11CpuAccessFlagInfo *pD3D11CpuAccessFlagInfo = CD3D11CpuAccessFlagInfoMap::Find( D3D11CpuAccessFlag );
	
	if( pD3D11CpuAccessFlagInfo )
		return tstring( pD3D11CpuAccessFlagInfo->szName );
	else
		return tstring( _T( "(Unknown value)" ) );
}

//------------------------------------------------------------------------

bool WGFTESTAPI FromString( D3D11_CPU_ACCESS_FLAG *pD3D11CpuAccessFlag, const tstring &str )
{
	const D3D11CpuAccessFlagInfo *pD3D11CpuAccessFlagInfo = CD3D11CpuAccessFlagInfoMap::Find( str );

	if( pD3D11CpuAccessFlagInfo )
	{
		*pD3D11CpuAccessFlag = pD3D11CpuAccessFlagInfo->D3D11CpuAccessFlag;
		return true;
	}

	//BUGBUG - elenakr - what to return for other enums ???
	//*pFormat = D3D_FORMAT_UNKNOWN;
	pD3D11CpuAccessFlag = NULL;
	return false;
}

//------------------------------------------------------------------------

const D3D11CpuAccessFlagInfo CD3D11CpuAccessFlagInfoMap::m_D3D11CpuAccessFlagInfoTable[] =
{
    { (D3D11_CPU_ACCESS_FLAG) (0), _T( "0" ) },
    { (D3D11_CPU_ACCESS_FLAG) (D3D11_CPU_ACCESS_WRITE), _T( "WRITE" ) },
    { (D3D11_CPU_ACCESS_FLAG) (D3D11_CPU_ACCESS_WRITE|D3D11_CPU_ACCESS_READ), _T( "WRITE|READ" ) },
    { (D3D11_CPU_ACCESS_FLAG) (D3D11_CPU_ACCESS_READ), _T( "READ" ) },

};

//------------------------------------------------------------------------

// Instantiate the singleton
CD3D11CpuAccessFlagInfoMap CD3D11CpuAccessFlagInfoMap::m_Map;

//------------------------------------------------------------------------

// Construct the lookup table.
CD3D11CpuAccessFlagInfoMap::CD3D11CpuAccessFlagInfoMap()
{
	size_t count = GetD3D11CpuAccessFlagInfoTableSize();

	for(size_t i = 0; i < count; i++ )
	{
		m_ByValue.insert( ByValue::value_type( m_D3D11CpuAccessFlagInfoTable[i].D3D11CpuAccessFlag, &m_D3D11CpuAccessFlagInfoTable[i] ) );
		m_ByDesc.insert( ByDesc::value_type( m_D3D11CpuAccessFlagInfoTable[i].szName, &m_D3D11CpuAccessFlagInfoTable[i] ) );
	}
}

//------------------------------------------------------------------------

const D3D11CpuAccessFlagInfo *CD3D11CpuAccessFlagInfoMap::Find( D3D11_CPU_ACCESS_FLAG D3D11CpuAccessFlag )
{
	ByValue::const_iterator it = m_Map.m_ByValue.find( D3D11CpuAccessFlag );
	if( it == m_Map.m_ByValue.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const D3D11CpuAccessFlagInfo *CD3D11CpuAccessFlagInfoMap::Find( const tstring &Desc )
{
	ByDesc::const_iterator it = m_Map.m_ByDesc.find( Desc );
	if( it == m_Map.m_ByDesc.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const size_t CD3D11CpuAccessFlagInfoMap::GetD3D11CpuAccessFlagInfoTableSize()
{
	return sizeof(m_D3D11CpuAccessFlagInfoTable) / sizeof(m_D3D11CpuAccessFlagInfoTable[0]);
}


//////////////////////////////////////////////////////////////////////////
// D3D11_RESOURCE_MISC_FLAG related definitions
//////////////////////////////////////////////////////////////////////////

tstring WGFTESTAPI ToString( D3D11_RESOURCE_MISC_FLAG D3D11ResourceMiscFlag )
{
	const D3D11ResourceMiscFlagInfo *pD3D11ResourceMiscFlagInfo = CD3D11ResourceMiscFlagInfoMap::Find( D3D11ResourceMiscFlag );
	
	if( pD3D11ResourceMiscFlagInfo )
		return tstring( pD3D11ResourceMiscFlagInfo->szName );
	else
		return tstring( _T( "(Unknown value)" ) );
}

//------------------------------------------------------------------------

bool WGFTESTAPI FromString( D3D11_RESOURCE_MISC_FLAG *pD3D11ResourceMiscFlag, const tstring &str )
{
	const D3D11ResourceMiscFlagInfo *pD3D11ResourceMiscFlagInfo = CD3D11ResourceMiscFlagInfoMap::Find( str );

	if( pD3D11ResourceMiscFlagInfo )
	{
		*pD3D11ResourceMiscFlag = pD3D11ResourceMiscFlagInfo->D3D11ResourceMiscFlag;
		return true;
	}

	//BUGBUG - elenakr - what to return for other enums ???
	//*pFormat = D3D_FORMAT_UNKNOWN;
	pD3D11ResourceMiscFlag = NULL;
	return false;
}

//------------------------------------------------------------------------

const D3D11ResourceMiscFlagInfo CD3D11ResourceMiscFlagInfoMap::m_D3D11ResourceMiscFlagInfoTable[] =
{
    { (D3D11_RESOURCE_MISC_FLAG) (0), _T( "0" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS), _T( "GENERATE_MIPS" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_SHARED), _T( "GENERATE_MIPS|SHARED" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_TEXTURECUBE), _T( "GENERATE_MIPS|TEXTURECUBE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "GENERATE_MIPS|SHARED_KEYEDMUTEX" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_SHARED|D3D11_RESOURCE_MISC_TEXTURECUBE), _T( "GENERATE_MIPS|SHARED|TEXTURECUBE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_SHARED|D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "GENERATE_MIPS|SHARED|SHARED_KEYEDMUTEX" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_SHARED|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|SHARED|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_TEXTURECUBE|D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "GENERATE_MIPS|TEXTURECUBE|SHARED_KEYEDMUTEX" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_TEXTURECUBE|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|TEXTURECUBE|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_SHARED|D3D11_RESOURCE_MISC_TEXTURECUBE|D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "GENERATE_MIPS|SHARED|TEXTURECUBE|SHARED_KEYEDMUTEX" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_SHARED|D3D11_RESOURCE_MISC_TEXTURECUBE|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|SHARED|TEXTURECUBE|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_SHARED|D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|SHARED|SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_TEXTURECUBE|D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|TEXTURECUBE|SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GENERATE_MIPS|D3D11_RESOURCE_MISC_SHARED|D3D11_RESOURCE_MISC_TEXTURECUBE|D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GENERATE_MIPS|SHARED|TEXTURECUBE|SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_SHARED), _T( "SHARED" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_SHARED|D3D11_RESOURCE_MISC_TEXTURECUBE), _T( "SHARED|TEXTURECUBE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_SHARED|D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "SHARED|SHARED_KEYEDMUTEX" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_SHARED|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "SHARED|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_SHARED|D3D11_RESOURCE_MISC_TEXTURECUBE|D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "SHARED|TEXTURECUBE|SHARED_KEYEDMUTEX" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_SHARED|D3D11_RESOURCE_MISC_TEXTURECUBE|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "SHARED|TEXTURECUBE|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_SHARED|D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "SHARED|SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_SHARED|D3D11_RESOURCE_MISC_TEXTURECUBE|D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "SHARED|TEXTURECUBE|SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_TEXTURECUBE), _T( "TEXTURECUBE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_TEXTURECUBE|D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "TEXTURECUBE|SHARED_KEYEDMUTEX" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_TEXTURECUBE|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "TEXTURECUBE|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_TEXTURECUBE|D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "TEXTURECUBE|SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX), _T( "SHARED_KEYEDMUTEX" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX|D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "SHARED_KEYEDMUTEX|GDI_COMPATIBLE" ) },
    { (D3D11_RESOURCE_MISC_FLAG) (D3D11_RESOURCE_MISC_GDI_COMPATIBLE), _T( "GDI_COMPATIBLE" ) },

};

//------------------------------------------------------------------------

// Instantiate the singleton
CD3D11ResourceMiscFlagInfoMap CD3D11ResourceMiscFlagInfoMap::m_Map;

//------------------------------------------------------------------------

// Construct the lookup table.
CD3D11ResourceMiscFlagInfoMap::CD3D11ResourceMiscFlagInfoMap()
{
	size_t count = GetD3D11ResourceMiscFlagInfoTableSize();

	for(size_t i = 0; i < count; i++ )
	{
		m_ByValue.insert( ByValue::value_type( m_D3D11ResourceMiscFlagInfoTable[i].D3D11ResourceMiscFlag, &m_D3D11ResourceMiscFlagInfoTable[i] ) );
		m_ByDesc.insert( ByDesc::value_type( m_D3D11ResourceMiscFlagInfoTable[i].szName, &m_D3D11ResourceMiscFlagInfoTable[i] ) );
	}
}

//------------------------------------------------------------------------

const D3D11ResourceMiscFlagInfo *CD3D11ResourceMiscFlagInfoMap::Find( D3D11_RESOURCE_MISC_FLAG D3D11ResourceMiscFlag )
{
	ByValue::const_iterator it = m_Map.m_ByValue.find( D3D11ResourceMiscFlag );
	if( it == m_Map.m_ByValue.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const D3D11ResourceMiscFlagInfo *CD3D11ResourceMiscFlagInfoMap::Find( const tstring &Desc )
{
	ByDesc::const_iterator it = m_Map.m_ByDesc.find( Desc );
	if( it == m_Map.m_ByDesc.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const size_t CD3D11ResourceMiscFlagInfoMap::GetD3D11ResourceMiscFlagInfoTableSize()
{
	return sizeof(m_D3D11ResourceMiscFlagInfoTable) / sizeof(m_D3D11ResourceMiscFlagInfoTable[0]);
}


//////////////////////////////////////////////////////////////////////////
// D3D11_MAP_FLAG related definitions
//////////////////////////////////////////////////////////////////////////

tstring WGFTESTAPI ToString( D3D11_MAP_FLAG D3D11MapFlag )
{
	const D3D11MapFlagInfo *pD3D11MapFlagInfo = CD3D11MapFlagInfoMap::Find( D3D11MapFlag );
	
	if( pD3D11MapFlagInfo )
		return tstring( pD3D11MapFlagInfo->szName );
	else
		return tstring( _T( "(Unknown value)" ) );
}

//------------------------------------------------------------------------

bool WGFTESTAPI FromString( D3D11_MAP_FLAG *pD3D11MapFlag, const tstring &str )
{
	const D3D11MapFlagInfo *pD3D11MapFlagInfo = CD3D11MapFlagInfoMap::Find( str );

	if( pD3D11MapFlagInfo )
	{
		*pD3D11MapFlag = pD3D11MapFlagInfo->D3D11MapFlag;
		return true;
	}

	//BUGBUG - elenakr - what to return for other enums ???
	//*pFormat = D3D_FORMAT_UNKNOWN;
	pD3D11MapFlag = NULL;
	return false;
}

//------------------------------------------------------------------------

const D3D11MapFlagInfo CD3D11MapFlagInfoMap::m_D3D11MapFlagInfoTable[] =
{
    { (D3D11_MAP_FLAG) (0), _T( "0" ) },
    { (D3D11_MAP_FLAG) (D3D11_MAP_FLAG_DO_NOT_WAIT), _T( "MAP_FLAG_DO_NOT_WAIT" ) },

};

//------------------------------------------------------------------------

// Instantiate the singleton
CD3D11MapFlagInfoMap CD3D11MapFlagInfoMap::m_Map;

//------------------------------------------------------------------------

// Construct the lookup table.
CD3D11MapFlagInfoMap::CD3D11MapFlagInfoMap()
{
	size_t count = GetD3D11MapFlagInfoTableSize();

	for(size_t i = 0; i < count; i++ )
	{
		m_ByValue.insert( ByValue::value_type( m_D3D11MapFlagInfoTable[i].D3D11MapFlag, &m_D3D11MapFlagInfoTable[i] ) );
		m_ByDesc.insert( ByDesc::value_type( m_D3D11MapFlagInfoTable[i].szName, &m_D3D11MapFlagInfoTable[i] ) );
	}
}

//------------------------------------------------------------------------

const D3D11MapFlagInfo *CD3D11MapFlagInfoMap::Find( D3D11_MAP_FLAG D3D11MapFlag )
{
	ByValue::const_iterator it = m_Map.m_ByValue.find( D3D11MapFlag );
	if( it == m_Map.m_ByValue.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const D3D11MapFlagInfo *CD3D11MapFlagInfoMap::Find( const tstring &Desc )
{
	ByDesc::const_iterator it = m_Map.m_ByDesc.find( Desc );
	if( it == m_Map.m_ByDesc.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const size_t CD3D11MapFlagInfoMap::GetD3D11MapFlagInfoTableSize()
{
	return sizeof(m_D3D11MapFlagInfoTable) / sizeof(m_D3D11MapFlagInfoTable[0]);
}


//////////////////////////////////////////////////////////////////////////
// D3D11_RAISE_FLAG related definitions
//////////////////////////////////////////////////////////////////////////

tstring WGFTESTAPI ToString( D3D11_RAISE_FLAG D3D11RaiseFlag )
{
	const D3D11RaiseFlagInfo *pD3D11RaiseFlagInfo = CD3D11RaiseFlagInfoMap::Find( D3D11RaiseFlag );
	
	if( pD3D11RaiseFlagInfo )
		return tstring( pD3D11RaiseFlagInfo->szName );
	else
		return tstring( _T( "(Unknown value)" ) );
}

//------------------------------------------------------------------------

bool WGFTESTAPI FromString( D3D11_RAISE_FLAG *pD3D11RaiseFlag, const tstring &str )
{
	const D3D11RaiseFlagInfo *pD3D11RaiseFlagInfo = CD3D11RaiseFlagInfoMap::Find( str );

	if( pD3D11RaiseFlagInfo )
	{
		*pD3D11RaiseFlag = pD3D11RaiseFlagInfo->D3D11RaiseFlag;
		return true;
	}

	//BUGBUG - elenakr - what to return for other enums ???
	//*pFormat = D3D_FORMAT_UNKNOWN;
	pD3D11RaiseFlag = NULL;
	return false;
}

//------------------------------------------------------------------------

const D3D11RaiseFlagInfo CD3D11RaiseFlagInfoMap::m_D3D11RaiseFlagInfoTable[] =
{
    { (D3D11_RAISE_FLAG) (0), _T( "0" ) },
    { (D3D11_RAISE_FLAG) (D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR), _T( "RAISE_FLAG_DRIVER_INTERNAL_ERROR" ) },

};

//------------------------------------------------------------------------

// Instantiate the singleton
CD3D11RaiseFlagInfoMap CD3D11RaiseFlagInfoMap::m_Map;

//------------------------------------------------------------------------

// Construct the lookup table.
CD3D11RaiseFlagInfoMap::CD3D11RaiseFlagInfoMap()
{
	size_t count = GetD3D11RaiseFlagInfoTableSize();

	for(size_t i = 0; i < count; i++ )
	{
		m_ByValue.insert( ByValue::value_type( m_D3D11RaiseFlagInfoTable[i].D3D11RaiseFlag, &m_D3D11RaiseFlagInfoTable[i] ) );
		m_ByDesc.insert( ByDesc::value_type( m_D3D11RaiseFlagInfoTable[i].szName, &m_D3D11RaiseFlagInfoTable[i] ) );
	}
}

//------------------------------------------------------------------------

const D3D11RaiseFlagInfo *CD3D11RaiseFlagInfoMap::Find( D3D11_RAISE_FLAG D3D11RaiseFlag )
{
	ByValue::const_iterator it = m_Map.m_ByValue.find( D3D11RaiseFlag );
	if( it == m_Map.m_ByValue.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const D3D11RaiseFlagInfo *CD3D11RaiseFlagInfoMap::Find( const tstring &Desc )
{
	ByDesc::const_iterator it = m_Map.m_ByDesc.find( Desc );
	if( it == m_Map.m_ByDesc.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const size_t CD3D11RaiseFlagInfoMap::GetD3D11RaiseFlagInfoTableSize()
{
	return sizeof(m_D3D11RaiseFlagInfoTable) / sizeof(m_D3D11RaiseFlagInfoTable[0]);
}


//////////////////////////////////////////////////////////////////////////
// D3D11_CLEAR_FLAG related definitions
//////////////////////////////////////////////////////////////////////////

tstring WGFTESTAPI ToString( D3D11_CLEAR_FLAG D3D11ClearFlag )
{
	const D3D11ClearFlagInfo *pD3D11ClearFlagInfo = CD3D11ClearFlagInfoMap::Find( D3D11ClearFlag );
	
	if( pD3D11ClearFlagInfo )
		return tstring( pD3D11ClearFlagInfo->szName );
	else
		return tstring( _T( "(Unknown value)" ) );
}

//------------------------------------------------------------------------

bool WGFTESTAPI FromString( D3D11_CLEAR_FLAG *pD3D11ClearFlag, const tstring &str )
{
	const D3D11ClearFlagInfo *pD3D11ClearFlagInfo = CD3D11ClearFlagInfoMap::Find( str );

	if( pD3D11ClearFlagInfo )
	{
		*pD3D11ClearFlag = pD3D11ClearFlagInfo->D3D11ClearFlag;
		return true;
	}

	//BUGBUG - elenakr - what to return for other enums ???
	//*pFormat = D3D_FORMAT_UNKNOWN;
	pD3D11ClearFlag = NULL;
	return false;
}

//------------------------------------------------------------------------

const D3D11ClearFlagInfo CD3D11ClearFlagInfoMap::m_D3D11ClearFlagInfoTable[] =
{
    { (D3D11_CLEAR_FLAG) (0), _T( "0" ) },
    { (D3D11_CLEAR_FLAG) (D3D11_CLEAR_DEPTH), _T( "DEPTH" ) },
    { (D3D11_CLEAR_FLAG) (D3D11_CLEAR_DEPTH|D3D11_CLEAR_STENCIL), _T( "DEPTH|STENCIL" ) },
    { (D3D11_CLEAR_FLAG) (D3D11_CLEAR_STENCIL), _T( "STENCIL" ) },

};

//------------------------------------------------------------------------

// Instantiate the singleton
CD3D11ClearFlagInfoMap CD3D11ClearFlagInfoMap::m_Map;

//------------------------------------------------------------------------

// Construct the lookup table.
CD3D11ClearFlagInfoMap::CD3D11ClearFlagInfoMap()
{
	size_t count = GetD3D11ClearFlagInfoTableSize();

	for(size_t i = 0; i < count; i++ )
	{
		m_ByValue.insert( ByValue::value_type( m_D3D11ClearFlagInfoTable[i].D3D11ClearFlag, &m_D3D11ClearFlagInfoTable[i] ) );
		m_ByDesc.insert( ByDesc::value_type( m_D3D11ClearFlagInfoTable[i].szName, &m_D3D11ClearFlagInfoTable[i] ) );
	}
}

//------------------------------------------------------------------------

const D3D11ClearFlagInfo *CD3D11ClearFlagInfoMap::Find( D3D11_CLEAR_FLAG D3D11ClearFlag )
{
	ByValue::const_iterator it = m_Map.m_ByValue.find( D3D11ClearFlag );
	if( it == m_Map.m_ByValue.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const D3D11ClearFlagInfo *CD3D11ClearFlagInfoMap::Find( const tstring &Desc )
{
	ByDesc::const_iterator it = m_Map.m_ByDesc.find( Desc );
	if( it == m_Map.m_ByDesc.end() )
		return NULL;
	else
		return (*it).second;
}

//------------------------------------------------------------------------

const size_t CD3D11ClearFlagInfoMap::GetD3D11ClearFlagInfoTableSize()
{
	return sizeof(m_D3D11ClearFlagInfoTable) / sizeof(m_D3D11ClearFlagInfoTable[0]);
}


