// Tests for Instruction: add
#include "include.fx"
$include "PShader.prep"
${##################################################################################################
#from PShader import *

if ps_3_0:
	regcombos = [ 'rcv',
				  'rvc' ]
else:
	regcombos = [ 'rcvt',
				  'rvcr' ]
regcombos = [c for c in apply(zip, regcombos)]

# default src values in range -2 < n < 2:
values = [-15, -57, 43, 63, 22, -8, -32, 39]
fValues = [v/32.0 for v in values]
src_defaults = fValues[:4], fValues[4:]
# now for <= 2.x color registers that are clamped 0-1:
fValues = [abs(v)/64.0 for v in values]
color_defaults = fValues[:4], fValues[4:]
# don't need this anymore:
del fValues
default_result = 0.0

SetupDefaults(src_defaults, color_defaults)

class Op_Add(Operation):
	def __init__(s, sat=0, pp=0):
		Operation.__init__(s, 'add', sat, pp)
	def Apply(s, src0, src1):
		result = [v0+v1 for v0,v1 in zip(src0.Transform(), src1.Transform())]
		return Operation.Apply(s, result)

# if you do not specify a value, the default will be used based on the register type
# if you do specify a value, that value will be set through one of several ways based
# on register type:
#	r - def c reg in shader, mov r#, c#
#	c, i, b - def c/i/b reg in shader, use that
#	v, t - set VertexShaderConstant for corresponding output - ! NOT CURRENTLY SUPPORTED
def WriteTestCase(
	sat=0, pp=0, mask=0,							# instruction & destination modifiers
	pred=0, pnot=0, pswz=0,							# predication
	reg0='r', src0=None, neg0=0, abs0=0, swz0=0,	# source 0
	reg1='r', src1=None, neg1=0, abs1=0, swz1=0,	# source 1
	**extra_params):
	global curCount

	# Initialize sources:
	sources = CollapseSources(locals(), 2)
	sources = [apply(Source, src) for src in sources]

	# Initialize other objects:
	pred = Predication(value=pred, pnot=pnot, pswz=pswz)
	dest = Destination('r0', mask)
	op = Op_Add(sat, pp)
	result = apply(op.Apply, sources)

	# Instruction takes care of the code generation:
	inst = Instruction(op, pred, dest, sources, result)
	inst.WriteTest()

	curCount += 1

	return inst.GetText()

$}$#################################################################################################

$[defineMACROS]

#define SET_PS_CONSTANTS \
	$< ' \\\n'.join(WritePSConstantDefaults(src_defaults).split('\n')) $>

$<WriteVS(src_defaults, color_defaults)$>

// Tests:

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// source registers * modifiers * swizzles
${SetGroup('Add - Standard ')
lTests = []
paramDict = {}
params = {
	'pp': [[0,1]],
	'reg0': [regcombos],
	'neg0': [[0,1]],
	'swz0': [[0]+lstBasicSwz],
	'neg1': [[0,1]],
	'swz1': [[0]+lstBasicSwz]
	}
if ps_3_0:
	params.update({
		'abs0': [[0,1]],
		'abs1': [[0,1]]
		})
combos = ComputeCombinations(params)
for c in combos:
	regs = c['reg0']
	paramDict.update(c)
	paramDict.update({'reg0':regs[0], 'reg1':regs[1]})
	lTests.append(apply(WriteTestCase, (), paramDict))
$}$#
$<'\n'.join(lTests)$>


////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// sat: source registers * pp
${SetGroup('Add - Sat ')
lTests = []
paramDict = {'sat':1}
params = {
	'pp': [[0,1]],
	'reg0': [regcombos],
	}
combos = ComputeCombinations(params)
for c in combos:
	regs = c['reg0']
	paramDict.update(c)
	paramDict.update({'reg0':regs[0], 'reg1':regs[1]})
	lTests.append(apply(WriteTestCase, (), paramDict))
$}$#
$<'\n'.join(lTests)$>


////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// masks & predication
${SetGroup('Add - Pred/Mask ')
lTests = []
paramDict = {}
params = {
	'reg0': [regcombos],
	'mask': [[0]+lstBasicWriteMasks],
	}
if predicate_support:
	params.update({
		'pred': [[0]+lstSomePredicateValues],
		'pnot': [[0,1]],
		'pswz': [[0]+lstReplicateSwizzles]
		})
combos = ComputeCombinations(params)
for c in combos:
	regs = c['reg0']
	paramDict.update(c)
	paramDict.update({'reg0':regs[0], 'reg1':regs[1]})
	lTests.append(apply(WriteTestCase, (), paramDict))
$}$#
$<'\n'.join(lTests)$>


// End of file.  $curCount tests generated.